{% from 'helpers.jinja2' import are_values_notequal %}

// Include the generated C interface so it gets compiled
#include "../../Tools/WrapperGenerator/Output/C/generated_wrapper.h"

#include <cassert>
#include <cmath>
#include <limits>
#include <stdexcept>
#include <chrono>

#include "generated_exports.h"


using namespace std::chrono_literals;

// TODO: Move this code somewhere it can be shared with CSPFoundation.cpp

#if defined(DEBUG)
#define LIB_NAME "ConnectedSpacesPlatform_D"
#else
#define LIB_NAME "ConnectedSpacesPlatform"
#endif

#if defined(CSP_WINDOWS)
// For SHGetKnownFolderPath
#include <Shlobj.h>
// For std::codecvt_utf8_utf16
#include <codecvt>
// For GetModuleHandle and GetProcAddress
#include <libloaderapi.h>

#define LOAD_OWN_MODULE() (void*)GetModuleHandleA(LIB_NAME)
#define GET_FUNCTION_ADDRESS(mod, name) (void*)GetProcAddress((HMODULE)(mod), name)
#elif defined(CSP_ANDROID)
// For dlopen and dlsym
#include <dlfcn.h>
// For fstat and mkdir
#include <sys/stat.h>

#define LOAD_OWN_MODULE() dlopen(nullptr, RTLD_LAZY)
#define GET_FUNCTION_ADDRESS(mod, name) dlsym((mod), name)
#elif defined(CSP_MACOSX) || defined(CSP_IOS)
// For dlopen and dlsym
#include <dlfcn.h>
// For stat and mkdir
#include <sys/stat.h>
// For PATH_MAX
#include <sys/syslimits.h>

#define LOAD_OWN_MODULE() dlopen(nullptr, RTLD_LAZY)
#define GET_FUNCTION_ADDRESS(mod, name) dlsym((mod), name)
#elif defined(CSP_WASM)
#include <emscripten.h>
#endif


namespace csp {
    // Helper function to free allocated memory from wrappers
    CSP_API void Free(void* Pointer) {
        std::free(Pointer);
    }

    // Helper function to check floats for equality using dynamic tolerance value
    inline bool FloatsAreEqual(double A, double B) {
        auto Tolerance = std::fmax(std::fabs(A), std::fabs(B)) * 1E-8;

        return (std::fabs(A - B) <= Tolerance);
    }

    void* ModuleHandle = nullptr;

    void* GetFunctionAddress([[maybe_unused]] const csp::common::String& Name)
    {
    #if defined(CSP_WASM)
        return nullptr;
    #else
        if (ModuleHandle == nullptr)
        {
            ModuleHandle = LOAD_OWN_MODULE();
            assert(ModuleHandle != nullptr);
        }

        return GET_FUNCTION_ADDRESS(ModuleHandle, Name.c_str());
    #endif
    }
    
    /********************************/
    /*       Global functions       */
    /********************************/

    {% include 'partials/functions/functions.cpp.jinja2' %}


    /********************************/
    /*           Classes            */
    /********************************/

    {% include 'partials/classes/classes.cpp.jinja2' %}
} // namespace csp