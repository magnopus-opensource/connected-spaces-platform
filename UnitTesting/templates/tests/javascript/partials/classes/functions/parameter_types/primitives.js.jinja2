{% for p in config.primitives %}
    // Pass {{ p.type }} min value by value
    test('classFunctions_Primitives_{{ p.type }}_PassValue_min', async function() {
        const instance = dummy.PrimitiveParameterTestClass.create();

        try {
            instance.classFunctions_Primitives_{{ p.type }}_PassValue_min({{ p.min }});
        }
        catch (e) {
            assert.fail(e.message);
        }
    });

    // Pass {{ p.type }} max value by value
    test('classFunctions_Primitives_{{ p.type }}_PassValue_max', async function() {
        const instance = dummy.PrimitiveParameterTestClass.create();

        try {
            instance.classFunctions_Primitives_{{ p.type }}_PassValue_max({{ p.max }});
        }
        catch (e) {
            assert.fail(e.message);
        }
    });

    {# TODO: Add support for out and in-out params in class methods #}
    {# // Get {{ p.type }} min value via out parameter
    test('classFunctions_Primitives_{{ p.type }}_PassOut_min', async function() {
        const result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_min();

        {{ assert_are_equal(p.use_epsilon, "result", p.min) }}
    });

    // Get {{ p.type }} max value via out parameter
    test('classFunctions_Primitives_{{ p.type }}_PassOut_max', async function() {
        const result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_max();

        {{ assert_are_equal(p.use_epsilon, "result", p.max) }}
    });

    // Get {{ p.type }} min and max value via out parameters
    test('classFunctions_Primitives_{{ p.type }}_PassOut_minmax', async function() {
        const result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_minmax();

        {{ assert_are_equal(p.use_epsilon, "result.minValue", p.min) }}
        {{ assert_are_equal(p.use_epsilon, "result.maxValue", p.max) }}
    });

    // Get {{ p.type }} min value via out parameter and return {{ p.type }} max value by value
    test('classFunctions_Primitives_{{ p.type }}_PassOut_min_ReturnValue_max', async function() {
        const result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_min_ReturnValue_max();

        {{ assert_are_equal(p.use_epsilon, "result.result", p.max) }}
        {{ assert_are_equal(p.use_epsilon, "result.value", p.min) }}
    });

    // Get {{ p.type }} min and max value via out parameters and return {{ p.type }} max value by value
    test('classFunctions_Primitives_{{ p.type }}_PassOut_minmax_ReturnValue_min', async function() {
        const result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_minmax_ReturnValue_min();

        {{ assert_are_equal(p.use_epsilon, "result.result", p.min) }}
        {{ assert_are_equal(p.use_epsilon, "result.minValue", p.min) }}
        {{ assert_are_equal(p.use_epsilon, "result.maxValue", p.max) }}
    });

    // Pass {{ p.type }} min value and get max value via in-out parameter
    test('classFunctions_Primitives_{{ p.type }}_PassInOut_minmax', async function() {
        let result;

        try {
            result = dummy.globalFunctions_Primitives_{{ p.type }}_PassInOut_minmax({{ p.min }});
        }
        catch (e) {
            assert.fail(e.message);
        }

        {{ assert_are_equal(p.use_epsilon, "result", p.max) }}
    });

    // Pass {{ p.type }} min value and get max value via in-out parameter, and pass {{ p.type }} max value and
    // get min value via another in-out parameter
    test('classFunctions_Primitives_{{ p.type }}_PassInOut_minmax_PassInOut_maxmin', async function() {
        let result;

        try {
            result = dummy.classFunctions_Primitives_{{ p.type }}_PassInOut_minmax_PassInOut_maxmin(
                {{ p.min }},
                {{ p.max }}
            );
        }
        catch (e) {
            assert.fail(e.message);
        }

        {{ assert_are_equal(p.use_epsilon, "result.value1", p.max) }}
        {{ assert_are_equal(p.use_epsilon, "result.value2", p.min) }}
    });

    // Pass {{ p.type }} min value and get max value via in-out parameter, and get {{ p.type }} max value by value
    test('classFunctions_Primitives_{{ p.type }}_PassInOut_minmax_ReturnValue_max', async function() {
        let result;

        try {
            result = dummy.classFunctions_Primitives_{{ p.type }}_PassInOut_minmax_ReturnValue_max({{ p.min }});
        }
        catch (e) {
            assert.fail(e.message);
        }

        {{ assert_are_equal(p.use_epsilon, "result.result", p.max) }}
        {{ assert_are_equal(p.use_epsilon, "result.value", p.max) }}
    });

    // Pass {{ p.type }} min value and get max value via in-out parameter, pass {{ p.type }} max value and get min
    // value via another in-out parameter, and get {{ p.type }} min value by value
    test('classFunctions_Primitives_{{ p.type }}_PassInOut_minmax_PassInOut_maxmin_ReturnValue_min',
        async function() {
            let result;

            try {
                result =
                    dummy.classFunctions_Primitives_{{ p.type }}_PassInOut_minmax_PassInOut_maxmin_ReturnValue_min(
                        {{ p.min }},
                        {{ p.max }}
                    );
            }
            catch (e) {
                assert.fail(e.message);
            }

            {{ assert_are_equal(p.use_epsilon, "result.result", p.min) }}
            {{ assert_are_equal(p.use_epsilon, "result.value1", p.max) }}
            {{ assert_are_equal(p.use_epsilon, "result.value2", p.min) }}
        }
    );

    // Get {{ p.type }} min value via out parameter, and pass {{ p.type }} min value and get max value via in-out
    // parameter
    test('classFunctions_Primitives_{{ p.type }}_PassOut_min_PassInOut_minmax', async function() {
        let result;

        try {
            result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_min_PassInOut_minmax({{ p.min }});
        }
        catch (e) {
            assert.fail(e.message);
        }

        {{ assert_are_equal(p.use_epsilon, "result.value1", p.min) }}
        {{ assert_are_equal(p.use_epsilon, "result.value2", p.max) }}
    });

    // Get {{ p.type }} min value via out parameter, pass {{ p.type }} min value and get max value via in-out
    // parameter, and get {{ p.type }} max value by value
    test('classFunctions_Primitives_{{ p.type }}_PassOut_min_PassInOut_minmax_ReturnValue_max', async function() {
        let result;

        try {
            result = dummy.classFunctions_Primitives_{{ p.type }}_PassOut_min_PassInOut_minmax_ReturnValue_max(
                {{ p.min }}
            );
        }
        catch (e) {
            assert.fail(e.message);
        }

        {{ assert_are_equal(p.use_epsilon, "result.value1", p.min) }}
        {{ assert_are_equal(p.use_epsilon, "result.value2", p.max) }}
    }); #}
{% endfor %}