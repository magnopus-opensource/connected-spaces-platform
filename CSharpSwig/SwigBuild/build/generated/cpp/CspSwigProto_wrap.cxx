/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040101
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CspSwigProto(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CspSwigProto(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CspSwigProto(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include "CSP/Common/Vector.h"
#include "CSP/Multiplayer/SpaceTransform.h"
#include "CSP/Common/Interfaces/IRealtimeEngine.h"
#include "CSP/Multiplayer/OfflineRealtimeEngine.h"


#include <string>


  typedef void (*EntityCreatedCbFP)(void* UserContext, csp::multiplayer::SpaceEntity* entity);

SWIGINTERN void csp_common_IRealtimeEngine_CreateEntity_Managed(csp::common::IRealtimeEngine *self,std::string const &name,csp::multiplayer::SpaceTransform const &xform,std::optional< uint64_t > parent,EntityCreatedCbFP cb,void *UserContext){

    self->CreateEntity(
      name, xform, parent,
      [cb, UserContext](csp::multiplayer::SpaceEntity* e) {
        if (cb) cb(UserContext, e);
      });
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_Vector3__SWIG_0() {
  void * jresult ;
  csp::common::Vector3 *result = 0 ;
  
  result = (csp::common::Vector3 *)new csp::common::Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_Vector3__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  csp::common::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (csp::common::Vector3 *)new csp::common::Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector3_X_set(void * jarg1, float jarg2) {
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector3_X_get(void * jarg1) {
  float jresult ;
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector3_Y_set(void * jarg1, float jarg2) {
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector3_Y_get(void * jarg1) {
  float jresult ;
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector3_Z_set(void * jarg1, float jarg2) {
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector3_Z_get(void * jarg1) {
  float jresult ;
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_delete_Vector3(void * jarg1) {
  csp::common::Vector3 *arg1 = (csp::common::Vector3 *) 0 ;
  
  arg1 = (csp::common::Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_Vector4__SWIG_0() {
  void * jresult ;
  csp::common::Vector4 *result = 0 ;
  
  result = (csp::common::Vector4 *)new csp::common::Vector4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_Vector4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  csp::common::Vector4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (csp::common::Vector4 *)new csp::common::Vector4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector4_X_set(void * jarg1, float jarg2) {
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector4_X_get(void * jarg1) {
  float jresult ;
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector4_Y_set(void * jarg1, float jarg2) {
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector4_Y_get(void * jarg1) {
  float jresult ;
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector4_Z_set(void * jarg1, float jarg2) {
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector4_Z_get(void * jarg1) {
  float jresult ;
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_Vector4_W_set(void * jarg1, float jarg2) {
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float arg2 ;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->W = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Csp_Vector4_W_get(void * jarg1) {
  float jresult ;
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  float result;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  result = (float) ((arg1)->W);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_delete_Vector4(void * jarg1) {
  csp::common::Vector4 *arg1 = (csp::common::Vector4 *) 0 ;
  
  arg1 = (csp::common::Vector4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_SpaceTransform__SWIG_0() {
  void * jresult ;
  csp::multiplayer::SpaceTransform *result = 0 ;
  
  result = (csp::multiplayer::SpaceTransform *)new csp::multiplayer::SpaceTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_SpaceTransform__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  csp::common::Vector3 *arg1 = 0 ;
  csp::common::Vector4 *arg2 = 0 ;
  csp::common::Vector3 *arg3 = 0 ;
  csp::multiplayer::SpaceTransform *result = 0 ;
  
  arg1 = (csp::common::Vector3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "csp::common::Vector3 const & is null", 0);
    return 0;
  } 
  arg2 = (csp::common::Vector4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "csp::common::Vector4 const & is null", 0);
    return 0;
  } 
  arg3 = (csp::common::Vector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "csp::common::Vector3 const & is null", 0);
    return 0;
  } 
  result = (csp::multiplayer::SpaceTransform *)new csp::multiplayer::SpaceTransform((csp::common::Vector3 const &)*arg1,(csp::common::Vector4 const &)*arg2,(csp::common::Vector3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_SpaceTransform_Position_set(void * jarg1, void * jarg2) {
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  csp::common::Vector3 *arg2 = (csp::common::Vector3 *) 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  arg2 = (csp::common::Vector3 *)jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_SpaceTransform_Position_get(void * jarg1) {
  void * jresult ;
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  csp::common::Vector3 *result = 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  result = (csp::common::Vector3 *)& ((arg1)->Position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_SpaceTransform_Rotation_set(void * jarg1, void * jarg2) {
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  csp::common::Vector4 *arg2 = (csp::common::Vector4 *) 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  arg2 = (csp::common::Vector4 *)jarg2; 
  if (arg1) (arg1)->Rotation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_SpaceTransform_Rotation_get(void * jarg1) {
  void * jresult ;
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  csp::common::Vector4 *result = 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  result = (csp::common::Vector4 *)& ((arg1)->Rotation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_SpaceTransform_Scale_set(void * jarg1, void * jarg2) {
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  csp::common::Vector3 *arg2 = (csp::common::Vector3 *) 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  arg2 = (csp::common::Vector3 *)jarg2; 
  if (arg1) (arg1)->Scale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_SpaceTransform_Scale_get(void * jarg1) {
  void * jresult ;
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  csp::common::Vector3 *result = 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  result = (csp::common::Vector3 *)& ((arg1)->Scale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_delete_SpaceTransform(void * jarg1) {
  csp::multiplayer::SpaceTransform *arg1 = (csp::multiplayer::SpaceTransform *) 0 ;
  
  arg1 = (csp::multiplayer::SpaceTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_IRealtimeEngine_CreateEntity_Managed(void * jarg1, const char * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  csp::common::IRealtimeEngine *arg1 = (csp::common::IRealtimeEngine *) 0 ;
  std::string *arg2 = 0 ;
  csp::multiplayer::SpaceTransform *arg3 = 0 ;
  std::optional< uint64_t > arg4 ;
  EntityCreatedCbFP arg5 = (EntityCreatedCbFP) 0 ;
  void *arg6 = (void *) 0 ;
  std::optional< uint64_t > *argp4 ;
  
  arg1 = (csp::common::IRealtimeEngine *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (csp::multiplayer::SpaceTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "csp::multiplayer::SpaceTransform const & is null", 0);
    return ;
  } 
  argp4 = (std::optional< uint64_t > *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::optional< uint64_t >", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (EntityCreatedCbFP)jarg5; 
  arg6 = (void *)jarg6; 
  csp_common_IRealtimeEngine_CreateEntity_Managed(arg1,(std::string const &)*arg2,(csp::multiplayer::SpaceTransform const &)*arg3,SWIG_STD_MOVE(arg4),arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_delete_IRealtimeEngine(void * jarg1) {
  csp::common::IRealtimeEngine *arg1 = (csp::common::IRealtimeEngine *) 0 ;
  
  arg1 = (csp::common::IRealtimeEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Csp_new_OfflineRealtimeEngine() {
  void * jresult ;
  csp::multiplayer::OfflineRealtimeEngine *result = 0 ;
  
  result = (csp::multiplayer::OfflineRealtimeEngine *)new csp::multiplayer::OfflineRealtimeEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Csp_delete_OfflineRealtimeEngine(void * jarg1) {
  csp::multiplayer::OfflineRealtimeEngine *arg1 = (csp::multiplayer::OfflineRealtimeEngine *) 0 ;
  
  arg1 = (csp::multiplayer::OfflineRealtimeEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT csp::common::IRealtimeEngine * SWIGSTDCALL CSharp_Csp_OfflineRealtimeEngine_SWIGUpcast(csp::multiplayer::OfflineRealtimeEngine *jarg1) {
    return (csp::common::IRealtimeEngine *)jarg1;
}

#ifdef __cplusplus
}
#endif

