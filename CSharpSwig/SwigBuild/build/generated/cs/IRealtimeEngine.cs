//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Csp {

public class IRealtimeEngine : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IRealtimeEngine(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IRealtimeEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(IRealtimeEngine obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~IRealtimeEngine() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CspSwigProtoPINVOKE.delete_IRealtimeEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void CreateEntity_Managed(string name, SpaceTransform xform, SWIGTYPE_p_std__optionalT_uint64_t_t parent, SWIGTYPE_p_f_p_void_p_csp__multiplayer__SpaceEntity__void cb, SWIGTYPE_p_void UserContext) {
    CspSwigProtoPINVOKE.IRealtimeEngine_CreateEntity_Managed(swigCPtr, name, SpaceTransform.getCPtr(xform), SWIGTYPE_p_std__optionalT_uint64_t_t.getCPtr(parent), SWIGTYPE_p_f_p_void_p_csp__multiplayer__SpaceEntity__void.getCPtr(cb), SWIGTYPE_p_void.getCPtr(UserContext));
    if (CspSwigProtoPINVOKE.SWIGPendingException.Pending) throw CspSwigProtoPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
