// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Common
{
    /// <summary>Singleton which manages mime types.</summary>

    public class MimeTypeHelper : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_common_MimeTypeHelper";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_MimeTypeHelper__Get_MimeType(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_MimeTypeHelper__Set_MimeType(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_MimeTypeHelper__Get_FileExtension(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_MimeTypeHelper__Set_FileExtension(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_MimeTypeHelper_Get_MimeTypeHelperR();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_common_MimeTypeHelper_GetMimeType_StringR_StringRC(IntPtr @class, IntPtr FilePath);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_MimeTypeHelper_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_MimeTypeHelper_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal MimeTypeHelper(NativePointer ptr) : base(ptr) { }

        public Csp.Common.MimeTypes MimeType
        {
            get => new Csp.Common.MimeTypes(csp_common_MimeTypeHelper__Get_MimeType(_ptr));
            set => csp_common_MimeTypeHelper__Set_MimeType(_ptr, value._ptr);
        }

        public Csp.Common.FileExtensions FileExtension
        {
            get => new Csp.Common.FileExtensions(csp_common_MimeTypeHelper__Get_FileExtension(_ptr));
            set => csp_common_MimeTypeHelper__Set_FileExtension(_ptr, value._ptr);
        }

        /// <summary>Gets singleton instance.</summary>
        /// <returns>MimeTypeHelper&</returns>


        public static Csp.Common.MimeTypeHelper Get()
        {
            var _result = new Csp.Common.MimeTypeHelper(csp_common_MimeTypeHelper_Get_MimeTypeHelperR());

            return _result;
        }

        /// <summary>Gets mime type from a file path.</summary>
        /// <param name="FilePath">Const string&</param>
        /// <returns>String&</returns>


        public string GetMimeType(string FilePath)
        {
            var _result = csp_common_MimeTypeHelper_GetMimeType_StringR_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(FilePath)
            );

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Private singleton constructor.</summary>

        protected MimeTypeHelper() { }

        ~MimeTypeHelper()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_common_MimeTypeHelper_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

