// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Common
{
    /// <summary>Variant is an intermediate class that enables clients to pack data into types that are supported by Connected Spaces Platform replication</summary>
    /// <remarks>systems.</remarks>

    public class Variant : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_common_Variant";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_bool(bool InBoolValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_float(float InFloatValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_int64_t(long InLongValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_String(string InStringValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_Vector3(Csp.Common.Vector3 InVector3Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_Vector4(Csp.Common.Vector4 InVector4Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_Ctor_VariantRC(IntPtr Other);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Common.VariantType csp_common_Variant_GetValueTypeC_VariantType(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_SetBool_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_common_Variant_GetBoolC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_SetFloat_void_float(IntPtr @class, float InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_common_Variant_GetFloatC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_SetInt_void_int64_t(IntPtr @class, long InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern long csp_common_Variant_GetIntC_int64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_SetString_void_StringRC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_common_Variant_GetStringC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_SetVector3_void_Vector3(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_GetVector3C_Vector3(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_Variant_SetVector4_void_Vector4(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_Variant_GetVector4C_Vector4(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal Variant(NativePointer ptr) : base(ptr) { }

        /// <summary>A default Variant will not have a valid type ("VariantType::InvalidType"), and will have no internal value associated.</summary>
        /// <remarks>Do not use this constructor unless you know what you are doing!</remarks>

        public Variant()
        {
            var np = csp_common_Variant_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a Variant based on a bool type.</summary>
        /// <param name="InBoolValue">In value</param>

        public Variant(bool InBoolValue)
        {
            var np = csp_common_Variant_Ctor_bool(InBoolValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a Variant based on a float type.</summary>
        /// <param name="InFloatValue">In value</param>

        public Variant(float InFloatValue)
        {
            var np = csp_common_Variant_Ctor_float(InFloatValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a Variant based on a Long (uint64_t) type.</summary>
        /// <param name="InLongValue">In value</param>

        public Variant(long InLongValue)
        {
            var np = csp_common_Variant_Ctor_int64_t(InLongValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a Variant based on an csp::common::String type.</summary>
        /// <param name="InStringValue">In value</param>

        public Variant(string InStringValue)
        {
            var np = csp_common_Variant_Ctor_String(InStringValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a Variant based on a csp::common::Vector3 type.</summary>
        /// <param name="InVector3Value">In value</param>

        public Variant(Csp.Common.Vector3 InVector3Value)
        {
            var np = csp_common_Variant_Ctor_Vector3(InVector3Value);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a Variant based on an csp::common::Vector4 type.</summary>
        /// <param name="InVector4Value">In value</param>

        public Variant(Csp.Common.Vector4 InVector4Value)
        {
            var np = csp_common_Variant_Ctor_Vector4(InVector4Value);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Copy constructor</summary>
        /// <param name="Other">Const variant&</param>

        public Variant(Csp.Common.Variant Other)
        {
            var np = csp_common_Variant_Ctor_VariantRC(Other._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Destructor</summary>

        ~Variant()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_common_Variant_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Gets the type of replicated value.</summary>
        /// <returns>The current variant internal type</returns>


        public Csp.Common.VariantType GetValueType()
        {
            var _result = csp_common_Variant_GetValueTypeC_VariantType(_ptr);

            return _result;
        }

        /// <summary>Sets internal variant type as a bool.</summary>


        public void SetBool(bool InValue)
        {
            csp_common_Variant_SetBool_void_bool(_ptr, InValue);
        }

        /// <summary>Gets internal variant type as a bool.</summary>
        /// <returns>Bool</returns>


        public bool GetBool()
        {
            var _result = csp_common_Variant_GetBoolC_bool(_ptr);

            return _result;
        }

        /// <summary>Sets internal variant type as a float.</summary>


        public void SetFloat(float InValue)
        {
            csp_common_Variant_SetFloat_void_float(_ptr, InValue);
        }

        /// <summary>Gets internal variant type as a float.</summary>
        /// <returns>Float</returns>


        public float GetFloat()
        {
            var _result = csp_common_Variant_GetFloatC_float(_ptr);

            return _result;
        }

        /// <summary>Sets internal variant type as an int64_t.</summary>


        public void SetInt(long InValue)
        {
            csp_common_Variant_SetInt_void_int64_t(_ptr, InValue);
        }

        /// <summary>Gets internal variant type as a int64_t.</summary>
        /// <returns>Int16_t</returns>


        public long GetInt()
        {
            var _result = csp_common_Variant_GetIntC_int64_t(_ptr);

            return _result;
        }

        /// <summary>Sets internal variant type as a String.</summary>


        public void SetString(string InValue)
        {
            csp_common_Variant_SetString_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(InValue));
        }

        /// <summary>Gets internal variant type as a String.</summary>
        /// <returns>Const csp::common::string&</returns>


        public string GetString()
        {
            var _result = csp_common_Variant_GetStringC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets internal variant type as a Vector3.</summary>


        public void SetVector3(Csp.Common.Vector3 InValue)
        {
            csp_common_Variant_SetVector3_void_Vector3(_ptr, InValue._ptr);
        }

        /// <summary>Gets internal variant type as a Vector3.</summary>
        /// <returns>Csp::common::vector3</returns>


        public Csp.Common.Vector3 GetVector3()
        {
            var _result = new Csp.Common.Vector3(csp_common_Variant_GetVector3C_Vector3(_ptr));

            return _result;
        }

        /// <summary>Sets internal variant type as a Vector4.</summary>


        public void SetVector4(Csp.Common.Vector4 InValue)
        {
            csp_common_Variant_SetVector4_void_Vector4(_ptr, InValue._ptr);
        }

        /// <summary>Gets internal variant type as a Vector4.</summary>
        /// <returns>Csp::common::vector4</returns>


        public Csp.Common.Vector4 GetVector4()
        {
            var _result = new Csp.Common.Vector4(csp_common_Variant_GetVector4C_Vector4(_ptr));

            return _result;
        }
    }
}

