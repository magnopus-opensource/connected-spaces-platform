// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Common
{
    /// <summary>Used with Http requests to managed cancellation states atomically.</summary>
    /// <remarks>Allows a request to be cancelled within the web client if connection is shutdown.</remarks>

    public class CancellationToken : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_common_CancellationToken";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_CancellationToken_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_CancellationToken_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_common_CancellationToken_Cancel_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_common_CancellationToken_CancelledC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_common_CancellationToken_Dummy_CancellationTokenR();

#pragma warning restore IDE1006
        #endregion

        internal CancellationToken(NativePointer ptr) : base(ptr) { }

        /// <remarks>Constructs a CancellationToken.</remarks>

        public CancellationToken()
        {
            var np = csp_common_CancellationToken_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Destructor.</summary>

        ~CancellationToken()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_common_CancellationToken_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Copy assignment.</summary>
        /// <param name="rhs">Const cancellationtoken&</param>
        /// <returns>CancellationToken&</returns>


        /// <summary>Move assignment.</summary>
        /// <param name="rhs">CancellationToken&&</param>
        /// <returns>CancellationToken&</returns>




        public void Cancel()
        {
            csp_common_CancellationToken_Cancel_void(_ptr);
        }

        /// <summary>Check if a request has been cancelled.</summary>
        /// <returns>Bool</returns>


        public bool Cancelled()
        {
            var _result = csp_common_CancellationToken_CancelledC_bool(_ptr);

            return _result;
        }

        /// <summary>Constructs a blank token.</summary>
        /// <returns>CancellationToken&</returns>


        public static Csp.Common.CancellationToken Dummy()
        {
            var _result = new Csp.Common.CancellationToken(csp_common_CancellationToken_Dummy_CancellationTokenR());

            return _result;
        }
    }
}

