// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Common
{
    static class ListDelegates
    {
        public delegate NativePointer csp_common_List_CtorDelegate();
        public delegate NativePointer csp_common_List_Ctor_size_tDelegate(ulong MinimumSize);
        public delegate NativePointer csp_common_List_Ctor_ListRCDelegate(IntPtr Other);
        public delegate void csp_common_List_DtorDelegate(IntPtr @class);
        public delegate NativePointer csp_common_List_op_Index_TR_size_t_GetDelegate(IntPtr @class, ulong Index);
        public delegate void csp_common_List_op_Index_TR_size_t_SetDelegate(IntPtr @class, ulong Index, IntPtr value);
        public delegate void csp_common_List_Append_void_TRCDelegate(IntPtr @class, IntPtr Item);
        public delegate void csp_common_List_Insert_void_size_t_TRCDelegate(IntPtr @class, ulong Index, IntPtr Item);
        public delegate void csp_common_List_Remove_void_size_tDelegate(IntPtr @class, ulong Index);
        public delegate void csp_common_List_RemoveItem_void_TRCDelegate(IntPtr @class, IntPtr Item);
        public delegate ulong csp_common_List_SizeC_size_tCDelegate(IntPtr @class);
        public delegate void csp_common_List_Clear_voidDelegate(IntPtr @class);
        public delegate bool csp_common_List_ContainsC_bool_TRCDelegate(IntPtr @class, IntPtr Item);
    }

    public class List<T> : NativeClassWrapper, IDisposable
    {
        string __safeTypeName;
        internal override string _safeTypeName
        {
            get => __safeTypeName;
        }

        ListDelegates.csp_common_List_CtorDelegate csp_common_List_Ctor;
        ListDelegates.csp_common_List_Ctor_size_tDelegate csp_common_List_Ctor_size_t;
        ListDelegates.csp_common_List_Ctor_ListRCDelegate csp_common_List_Ctor_ListRC;
        ListDelegates.csp_common_List_DtorDelegate csp_common_List_Dtor;
        ListDelegates.csp_common_List_op_Index_TR_size_t_GetDelegate csp_common_List_op_Index_TR_size_t_Get;
        ListDelegates.csp_common_List_op_Index_TR_size_t_SetDelegate csp_common_List_op_Index_TR_size_t_Set;
        ListDelegates.csp_common_List_Append_void_TRCDelegate csp_common_List_Append_void_TRC;
        ListDelegates.csp_common_List_Insert_void_size_t_TRCDelegate csp_common_List_Insert_void_size_t_TRC;
        ListDelegates.csp_common_List_Remove_void_size_tDelegate csp_common_List_Remove_void_size_t;
        ListDelegates.csp_common_List_RemoveItem_void_TRCDelegate csp_common_List_RemoveItem_void_TRC;
        ListDelegates.csp_common_List_SizeC_size_tCDelegate csp_common_List_SizeC_size_tC;
        ListDelegates.csp_common_List_Clear_voidDelegate csp_common_List_Clear_void;
        ListDelegates.csp_common_List_ContainsC_bool_TRCDelegate csp_common_List_ContainsC_bool_TRC;

        readonly bool IsTProxyClass;

        void InitialiseNativeDelegates()
        {
            // TODO: Move this stuff into a static dictionary so we don't have to create instances to get the string
            //  eg.
            //  static class TemplateMetadata {
            //    public static Dictionary<Type, string> SafeNames = {
            //      [typeof(Csp.Systems.Anchor)] = "csp_systems_Anchor"
            //    };
            //
            //    /* Delegates here for template instance functions */
            //  }
            const BindingFlags ctorBindingFlags =
                BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly;
            var ctorArgs = new object[] { NativePointer.Zero };

            string TTypeName;

            if (typeof(NativeClassWrapper).IsAssignableFrom(typeof(T)))
            {
                var instance = Activator.CreateInstance(typeof(T), ctorBindingFlags, null, ctorArgs, null);
                TTypeName = ((NativeClassWrapper)instance)._safeTypeName;
            }
            else if (typeof(T).IsEnum)
            {
                TTypeName = typeof(T).Namespace switch
                {
                    "Csp" => "csp_",
                    "Csp.Common" => "csp_common_",
                    "Csp.Systems" => "csp_systems_",
                    "Csp.Multiplayer" => "csp_multiplayer_",
                    _ => throw new Exception("Unknown enum namespace!"),
                };
                TTypeName += typeof(T).Name;
            }
            else
                TTypeName = typeof(T).Name;

            __safeTypeName = $"csp_common_List_{TTypeName}";

            IntPtr ptr;

            ptr = Global.GetFunctionAddress($"csp_common_List_Ctor_{TTypeName}");
            csp_common_List_Ctor = Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_CtorDelegate>(
                ptr
            );

            ptr = Global.GetFunctionAddress($"csp_common_List_Ctor_size_t_{TTypeName}");
            csp_common_List_Ctor_size_t =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_Ctor_size_tDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_Ctor_ListRC_{TTypeName}");
            csp_common_List_Ctor_ListRC =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_Ctor_ListRCDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_Dtor_{TTypeName}");
            csp_common_List_Dtor = Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_DtorDelegate>(
                ptr
            );

            ptr = Global.GetFunctionAddress($"csp_common_List_op_Index_TR_size_t_Get_{TTypeName}");
            csp_common_List_op_Index_TR_size_t_Get =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_op_Index_TR_size_t_GetDelegate>(
                    ptr
                );
            ptr = Global.GetFunctionAddress($"csp_common_List_op_Index_TR_size_t_Set_{TTypeName}");
            csp_common_List_op_Index_TR_size_t_Set =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_op_Index_TR_size_t_SetDelegate>(
                    ptr
                );

            ptr = Global.GetFunctionAddress($"csp_common_List_Append_void_TRC_{TTypeName}");
            csp_common_List_Append_void_TRC =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_Append_void_TRCDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_Insert_void_size_t_TRC_{TTypeName}");
            csp_common_List_Insert_void_size_t_TRC =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_Insert_void_size_t_TRCDelegate>(
                    ptr
                );

            ptr = Global.GetFunctionAddress($"csp_common_List_Remove_void_size_t_{TTypeName}");
            csp_common_List_Remove_void_size_t =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_Remove_void_size_tDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_RemoveItem_void_TRC_{TTypeName}");
            csp_common_List_RemoveItem_void_TRC =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_RemoveItem_void_TRCDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_SizeC_size_tC_{TTypeName}");
            csp_common_List_SizeC_size_tC =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_SizeC_size_tCDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_Clear_void_{TTypeName}");
            csp_common_List_Clear_void =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_Clear_voidDelegate>(ptr);

            ptr = Global.GetFunctionAddress($"csp_common_List_ContainsC_bool_TRC_{TTypeName}");
            csp_common_List_ContainsC_bool_TRC =
                Marshal.GetDelegateForFunctionPointer<ListDelegates.csp_common_List_ContainsC_bool_TRCDelegate>(ptr);
        }

        internal List(NativePointer ptr)
        {
            InitialiseNativeDelegates();

            IsTProxyClass = typeof(NativeClassWrapper).IsAssignableFrom(typeof(T));

            _ptr = ptr.Pointer;
            _ownsPtr = ptr.OwnsOwnData;
        }

        public List()
        {
            InitialiseNativeDelegates();

            IsTProxyClass = typeof(NativeClassWrapper).IsAssignableFrom(typeof(T));

            var np = csp_common_List_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        public List(ulong MinimumSize)
        {
            InitialiseNativeDelegates();

            IsTProxyClass = typeof(NativeClassWrapper).IsAssignableFrom(typeof(T));

            var np = csp_common_List_Ctor_size_t(MinimumSize);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        public List(Csp.Common.List<T> Other)
        {
            InitialiseNativeDelegates();

            IsTProxyClass = typeof(NativeClassWrapper).IsAssignableFrom(typeof(T));

            var np = csp_common_List_Ctor_ListRC(Other._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~List()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_common_List_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        public T this[ulong Index]
        {
            get
            {
                var valuePtr = csp_common_List_op_Index_TR_size_t_Get(_ptr, Index);

                return (T)WrapperHelper.NativePointerToObject<T>(valuePtr, IsTProxyClass);
            }
            set
            {
                var valuePtr = WrapperHelper.ObjectToIntPtr(value, IsTProxyClass);

                csp_common_List_op_Index_TR_size_t_Set(_ptr, Index, valuePtr);
            }
        }

        public void Append(T Item)
        {
            csp_common_List_Append_void_TRC(_ptr, WrapperHelper.ObjectToIntPtr(Item, IsTProxyClass));
        }

        public void Insert(ulong Index, T Item)
        {
            csp_common_List_Insert_void_size_t_TRC(_ptr, Index, WrapperHelper.ObjectToIntPtr(Item, IsTProxyClass));
        }

        public void Remove(ulong Index)
        {
            csp_common_List_Remove_void_size_t(_ptr, Index);
        }

        public void RemoveItem(T Item)
        {
            csp_common_List_RemoveItem_void_TRC(_ptr, WrapperHelper.ObjectToIntPtr(Item, IsTProxyClass));
        }

        public ulong Size()
        {
            return csp_common_List_SizeC_size_tC(_ptr);
        }

        public void Clear()
        {
            csp_common_List_Clear_void(_ptr);
        }

        public bool Contains(T Item)
        {
            return csp_common_List_ContainsC_bool_TRC(_ptr, WrapperHelper.ObjectToIntPtr(Item, IsTProxyClass));
        }
    }
}

