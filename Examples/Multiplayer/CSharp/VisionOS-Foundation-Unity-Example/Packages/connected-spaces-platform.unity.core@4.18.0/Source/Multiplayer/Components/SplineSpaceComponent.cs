// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    public class SplineSpaceComponent : Csp.Multiplayer.ComponentBase, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_SplineSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SplineSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SplineSpaceComponent_GetLocationAlongSpline_Vector3_float(
            IntPtr @class,
            float NormalisedDistance
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SplineSpaceComponent_GetWaypointsC_List(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SplineSpaceComponent_SetWaypoints_void_ListRC(
            IntPtr @class,
            IntPtr Waypoints
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SplineSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal SplineSpaceComponent(NativePointer ptr) : base(ptr) { }

        public SplineSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the spline space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public SplineSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_SplineSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Generate a vector3 at a chosen position along the spline</summary>
        /// <remarks>Note: Generates a cubic spline position from current Waypoints</remarks>
        /// <param name="NormalisedDistance">Distance along the spline being evaluated between a value of 0 and 1</param>
        /// <returns>Position value of x,y,z in vector3 format of the generated spline position</returns>


        public Csp.Common.Vector3 GetLocationAlongSpline(float NormalisedDistance)
        {
            var _result = new Csp.Common.Vector3(
                csp_multiplayer_SplineSpaceComponent_GetLocationAlongSpline_Vector3_float(_ptr, NormalisedDistance)
            );

            return _result;
        }

        /// <summary>Get waypoints used to generate spline</summary>
        /// <remarks>Note: Get the number of positions generated by the spline</remarks>
        /// <returns>Current waypoint Values Set</returns>


        public Csp.Common.List<Csp.Common.Vector3> GetWaypoints()
        {
            var _result = new Csp.Common.List<Csp.Common.Vector3>(
                csp_multiplayer_SplineSpaceComponent_GetWaypointsC_List(_ptr)
            );

            return _result;
        }

        /// <summary>Set waypoints to generate the spline</summary>
        /// <remarks>Note: Set the number of positions generated by the spline</remarks>
        /// <param name="Value">Number of positions between each waypoint</param>


        public void SetWaypoints(Csp.Common.List<Csp.Common.Vector3> Waypoints)
        {
            csp_multiplayer_SplineSpaceComponent_SetWaypoints_void_ListRC(_ptr, Waypoints._ptr);
        }

        ~SplineSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_SplineSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

