// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Simple class for holding the position, rotation and scale of a transform.</summary>

    public class SpaceTransform : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_SpaceTransform";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceTransform__Get_Position(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceTransform__Set_Position(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceTransform__Get_Rotation(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceTransform__Set_Rotation(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceTransform__Get_Scale(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceTransform__Set_Scale(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceTransform_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceTransform_Ctor_Vector3RC_Vector4RC_Vector3RC(
            IntPtr Position,
            IntPtr Rotation,
            IntPtr Scale
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceTransform_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal SpaceTransform(NativePointer ptr) : base(ptr) { }

        /// @brief The position value for the transform.

        public Csp.Common.Vector3 Position
        {
            get => new Csp.Common.Vector3(csp_multiplayer_SpaceTransform__Get_Position(_ptr));
            set => csp_multiplayer_SpaceTransform__Set_Position(_ptr, value._ptr);
        }

        /// @brief The rotation value for the transform.

        public Csp.Common.Vector4 Rotation
        {
            get => new Csp.Common.Vector4(csp_multiplayer_SpaceTransform__Get_Rotation(_ptr));
            set => csp_multiplayer_SpaceTransform__Set_Rotation(_ptr, value._ptr);
        }

        /// @brief The scale value for the transform.

        public Csp.Common.Vector3 Scale
        {
            get => new Csp.Common.Vector3(csp_multiplayer_SpaceTransform__Get_Scale(_ptr));
            set => csp_multiplayer_SpaceTransform__Set_Scale(_ptr, value._ptr);
        }

        /// <summary>Default constuctor for the SpaceTransform</summary>

        public SpaceTransform()
        {
            var np = csp_multiplayer_SpaceTransform_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Custom constructor for the SpaceTransform.</summary>
        /// <param name="Position">The position value for the transform.</param>
        /// <param name="Rotation">The rotation value for the transform.</param>
        /// <param name="Scale">The scale value for the transform.</param>

        public SpaceTransform(Csp.Common.Vector3 Position, Csp.Common.Vector4 Rotation, Csp.Common.Vector3 Scale)
        {
            var np = csp_multiplayer_SpaceTransform_Ctor_Vector3RC_Vector4RC_Vector3RC(
                Position._ptr,
                Rotation._ptr,
                Scale._ptr
            );
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~SpaceTransform()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_SpaceTransform_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

