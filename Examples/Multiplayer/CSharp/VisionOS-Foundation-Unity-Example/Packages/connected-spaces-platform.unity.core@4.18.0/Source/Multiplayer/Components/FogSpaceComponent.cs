// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// @ingroup FogSpaceComponent
    /// <summary>Data representation of an FogSpaceComponent.</summary>

    public class FogSpaceComponent
        : Csp.Multiplayer.ComponentBase,
          Csp.Multiplayer.IThirdPartyComponentRef,
          Csp.Multiplayer.ITransformComponent,
          Csp.Multiplayer.IVisibleComponent,
          IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_FogSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_FogSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.FogMode csp_multiplayer_FogSpaceComponent_GetFogModeC_FogMode(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetFogMode_void_FogMode(
            IntPtr @class,
            Csp.Multiplayer.FogMode Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_FogSpaceComponent_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetPosition_void_Vector3RC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_FogSpaceComponent_GetRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetRotation_void_Vector4RC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_FogSpaceComponent_GetScaleC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetScale_void_Vector3RC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_FogSpaceComponent_GetTransformC_SpaceTransform(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetTransform_void_SpaceTransformRC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_FogSpaceComponent_GetStartDistanceC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetStartDistance_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_FogSpaceComponent_GetEndDistanceC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetEndDistance_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_FogSpaceComponent_GetColorC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetColor_void_Vector3RC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_FogSpaceComponent_GetDensityC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetDensity_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_FogSpaceComponent_GetHeightFalloffC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetHeightFalloff_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_FogSpaceComponent_GetMaxOpacityC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetMaxOpacity_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_FogSpaceComponent_GetIsVolumetricC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetIsVolumetric_void_bool(IntPtr @class, bool Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_FogSpaceComponent_GetIsVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetIsVisible_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_FogSpaceComponent_GetIsARVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetIsARVisible_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_FogSpaceComponent_GetThirdPartyComponentRefC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_SetThirdPartyComponentRef_void_StringRC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_FogSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal FogSpaceComponent(NativePointer ptr) : base(ptr) { }

        public FogSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the fog space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public FogSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_FogSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Retrieves the type of fog currently used by this fog component.</summary>
        /// <returns>The modality of fog currently used by this component.</returns>


        public Csp.Multiplayer.FogMode GetFogMode()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetFogModeC_FogMode(_ptr);

            return _result;
        }

        /// <summary>Sets the type of fog currently to be used by this fog component.</summary>
        /// <param name="Value">The modality of fog to be used by this component.</param>


        public void SetFogMode(Csp.Multiplayer.FogMode Value)
        {
            csp_multiplayer_FogSpaceComponent_SetFogMode_void_FogMode(_ptr, Value);
        }

        /// <remarks>\addtogroup ITransformComponent</remarks>
        /// @{
        /// @copydoc IPositionComponent::GetPosition()


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_FogSpaceComponent_GetPositionC_Vector3RC(_ptr));

            return _result;
        }

        /// @copydoc IPositionComponent::SetPosition()


        public void SetPosition(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetPosition_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @copydoc IRotationComponent::GetRotation()


        public Csp.Common.Vector4 GetRotation()
        {
            var _result = new Csp.Common.Vector4(csp_multiplayer_FogSpaceComponent_GetRotationC_Vector4RC(_ptr));

            return _result;
        }

        /// @copydoc IRotationComponent::SetRotation()


        public void SetRotation(Csp.Common.Vector4 InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetRotation_void_Vector4RC(_ptr, InValue._ptr);
        }

        /// @copydoc IScaleComponent::GetScale()


        public Csp.Common.Vector3 GetScale()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_FogSpaceComponent_GetScaleC_Vector3RC(_ptr));

            return _result;
        }

        /// @copydoc IScaleComponent::SetScale()


        public void SetScale(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetScale_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @copydoc ITransformComponent::GetTransform()


        public Csp.Multiplayer.SpaceTransform GetTransform()
        {
            var _result = new Csp.Multiplayer.SpaceTransform(
                csp_multiplayer_FogSpaceComponent_GetTransformC_SpaceTransform(_ptr)
            );

            return _result;
        }

        /// @copydoc ITransformComonent::SetTransform()


        public void SetTransform(Csp.Multiplayer.SpaceTransform InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetTransform_void_SpaceTransformRC(_ptr, InValue._ptr);
        }

        /// @}
        /// <summary>Get start sistance</summary>
        /// <remarks>Note: Distance from camera that the fog will start.</remarks>
        /// <remarks>Note: 0 = this property has no effect.</remarks>
        /// <returns>Current start distance</returns>


        public float GetStartDistance()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetStartDistanceC_float(_ptr);

            return _result;
        }

        /// <summary>Set Current start distance</summary>
        /// <remarks>Note: Distance from camera that the fog will start.</remarks>
        /// <remarks>Note: 0 = this property has no effect.</remarks>
        /// <param name="Value">Current start distance</param>


        public void SetStartDistance(float Value)
        {
            csp_multiplayer_FogSpaceComponent_SetStartDistance_void_float(_ptr, Value);
        }

        /// <summary>Get Current end distance</summary>
        /// <remarks>Note: objects passed this distance will not be affected by fog.</remarks>
        /// <remarks>Note: 0 = this property has no effect.</remarks>
        /// <returns>Current end distance</returns>


        public float GetEndDistance()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetEndDistanceC_float(_ptr);

            return _result;
        }

        /// <summary>Set Current end distance</summary>
        /// <remarks>Note: objects passed this distance will not be affected by fog.</remarks>
        /// <remarks>Note: 0 = this property has no effect.</remarks>
        /// <param name="Value">Current end distance</param>


        public void SetEndDistance(float Value)
        {
            csp_multiplayer_FogSpaceComponent_SetEndDistance_void_float(_ptr, Value);
        }

        /// <summary>Get fog color</summary>
        /// <returns>Current fog color</returns>


        public Csp.Common.Vector3 GetColor()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_FogSpaceComponent_GetColorC_Vector3RC(_ptr));

            return _result;
        }

        /// <summary>Set Current fog color</summary>
        /// <param name="Value">Current fog color</param>


        public void SetColor(Csp.Common.Vector3 Value)
        {
            csp_multiplayer_FogSpaceComponent_SetColor_void_Vector3RC(_ptr, Value._ptr);
        }

        /// <summary>Get Global density factor</summary>
        /// <remarks>Note: Global density factor</remarks>
        /// <returns>Current Global density factor</returns>


        public float GetDensity()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetDensityC_float(_ptr);

            return _result;
        }

        /// <summary>Set Global density factor</summary>
        /// <remarks>Note: Global density factor</remarks>
        /// <param name="Value">Global density factor</param>


        public void SetDensity(float Value)
        {
            csp_multiplayer_FogSpaceComponent_SetDensity_void_float(_ptr, Value);
        }

        /// <summary>Get Height density factor</summary>
        /// <remarks>Note: Height density factor, controls how the density increases and height decreases. Smaller values make the visible transition larger.</remarks>
        /// <returns>Current Height density factor</returns>


        public float GetHeightFalloff()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetHeightFalloffC_float(_ptr);

            return _result;
        }

        /// <summary>Set Height density factor</summary>
        /// <remarks>Note: Height density factor, controls how the density increases and height decreases. Smaller values make the visible transition larger.</remarks>
        /// <param name="Value">Height density factor</param>


        public void SetHeightFalloff(float Value)
        {
            csp_multiplayer_FogSpaceComponent_SetHeightFalloff_void_float(_ptr, Value);
        }

        /// <summary>Get Maximum opacity of the Fog.</summary>
        /// <remarks>Maximum opacity of the Fog.</remarks>
        /// <remarks>Note: 1 = fog becomes fully opaque at a distance and replaces the scene colour completely.</remarks>
        /// <remarks>Note: 0 = fog colour will have no impact.</remarks>
        /// <returns>Current Maximum opacity of the Fog</returns>


        public float GetMaxOpacity()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetMaxOpacityC_float(_ptr);

            return _result;
        }

        /// <summary>Set Maximum opacity of the Fog.</summary>
        /// <param name="Value">Maximum opacity of the Fog.</param>


        public void SetMaxOpacity(float Value)
        {
            csp_multiplayer_FogSpaceComponent_SetMaxOpacity_void_float(_ptr, Value);
        }

        /// <summary>Get Is Fog Volumetric.</summary>
        /// <param name="Value">Fog Volumetric Flag</param>


        public bool GetIsVolumetric()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetIsVolumetricC_bool(_ptr);

            return _result;
        }

        /// <summary>Set Is Fog Volumetric</summary>
        /// <param name="Value">Is Fog Volumetric Flag</param>


        public void SetIsVolumetric(bool Value)
        {
            csp_multiplayer_FogSpaceComponent_SetIsVolumetric_void_bool(_ptr, Value);
        }

        /// <remarks>\addtogroup IVisibleComponent</remarks>
        /// @{
        /// @copydoc IVisibleComponent::GetIsVisible()


        public bool GetIsVisible()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetIsVisibleC_bool(_ptr);

            return _result;
        }

        /// @copydoc IVisibleComponent::SetIsVisible()


        public void SetIsVisible(bool InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetIsVisible_void_bool(_ptr, InValue);
        }

        /// @copydoc IVisibleComponent::GetIsARVisible()


        public bool GetIsARVisible()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetIsARVisibleC_bool(_ptr);

            return _result;
        }

        /// @copydoc IVisibleComponent::SetIsARVisible()


        public void SetIsARVisible(bool InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetIsARVisible_void_bool(_ptr, InValue);
        }

        /// @}
        /// <remarks>\addtogroup IThirdPartyComponentRef</remarks>
        /// @{
        /// @copydoc IThirdPartyComponentRef::GetThirdPartyComponentRef()


        public string GetThirdPartyComponentRef()
        {
            var _result = csp_multiplayer_FogSpaceComponent_GetThirdPartyComponentRefC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// @copydoc IThirdPartyComponentRef::SetThirdPartyComponentRef()


        public void SetThirdPartyComponentRef(string InValue)
        {
            csp_multiplayer_FogSpaceComponent_SetThirdPartyComponentRef_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InValue)
            );
        }

        ~FogSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_FogSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

