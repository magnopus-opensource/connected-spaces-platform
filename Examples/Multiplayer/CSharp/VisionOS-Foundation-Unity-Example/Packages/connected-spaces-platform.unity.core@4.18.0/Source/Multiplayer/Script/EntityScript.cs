// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Manages the script attached to an Entity.</summary>
    /// <remarks>/// Provides functions for setting the script source, subscribing to property changes and messages and other script management.</remarks>

    public class EntityScript : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_EntityScript";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_SetScriptSource_void_StringRC(
            IntPtr @class,
            IntPtr ScriptSource
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_EntityScript_Invoke_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_RunScript_void_StringRC(IntPtr @class, IntPtr ScriptSource);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_EntityScript_HasError_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_EntityScript_GetErrorText_String(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_EntityScript_GetScriptSource_String(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_SetScriptSpaceComponent_void_ScriptSpaceComponentP(
            IntPtr @class,
            IntPtr InEnityScriptComponent
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_OnPropertyChanged_void_int32_t_int32_t(
            IntPtr @class,
            int ComponentId,
            int PropertyKey
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_PostMessageToScript_void_StringC_StringC(
            IntPtr @class,
            IntPtr Message,
            IntPtr MessageParamsJson
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_OnSourceChanged_void_StringRC(
            IntPtr @class,
            IntPtr InScriptSource
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_RegisterSourceAsModule_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_Bind_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_SetOwnerId_void_uint64_t(IntPtr @class, ulong ClientId);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_EntityScript_GetOwnerIdC_uint64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_EntityScript_Shutdown_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_EntityScript_Ctor_SpaceEntityP_SpaceEntitySystemP(
            IntPtr InEntity,
            IntPtr InSpaceEntitySystem
        );

#pragma warning restore IDE1006
        #endregion

        internal EntityScript(NativePointer ptr) : base(ptr) { }

        /// <summary>Destroy the instance of EntityScript.</summary>

        ~EntityScript()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_EntityScript_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Sets the source code for the script.</summary>
        /// <param name="ScriptSource">The source as a string.</param>


        public void SetScriptSource(string ScriptSource)
        {
            csp_multiplayer_EntityScript_SetScriptSource_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(ScriptSource)
            );
        }

        /// <summary>Runs the script.</summary>
        /// <returns>True if the script runs successfully or false if there are errors.</returns>


        public bool Invoke()
        {
            var _result = csp_multiplayer_EntityScript_Invoke_bool(_ptr);

            return _result;
        }

        /// <summary>Run a script with the given source rather than the stored source.</summary>
        /// <remarks>/// Will be run locally or remotely depending on leader election.</remarks>
        /// <remarks>/// @param ScriptSource csp::common::String : The source to use.</remarks>


        public void RunScript(string ScriptSource)
        {
            csp_multiplayer_EntityScript_RunScript_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(ScriptSource));
        }

        /// <summary>Checks if there was an error with the last script invocation.</summary>
        /// <returns>True if there was an error, false otherwise.</returns>


        public bool HasError()
        {
            var _result = csp_multiplayer_EntityScript_HasError_bool(_ptr);

            return _result;
        }

        /// <summary>Gets the text of the last error if it is known or otherwise returns a default unknown error string.</summary>
        /// <returns>Text of the last error.</returns>


        public string GetErrorText()
        {
            var _result = csp_multiplayer_EntityScript_GetErrorText_String(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Gets the stored script source code.</summary>
        /// <returns>The source as a string.</returns>


        public string GetScriptSource()
        {
            var _result = csp_multiplayer_EntityScript_GetScriptSource_String(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the related component for this script.</summary>
        /// <param name="InEnityScriptComponent">The component related to this script.</param>


        public void SetScriptSpaceComponent(Csp.Multiplayer.ScriptSpaceComponent InEnityScriptComponent)
        {
            csp_multiplayer_EntityScript_SetScriptSpaceComponent_void_ScriptSpaceComponentP(
                _ptr,
                InEnityScriptComponent._ptr
            );
        }

        /// <summary>Called when a component property changes so that a message can be passed to the script if a subscription has been setup.</summary>
        /// <param name="ComponentId">ID of the component that changed.</param>
        /// <param name="PropertyKey">Key of the property that changed.</param>


        public void OnPropertyChanged(int ComponentId, int PropertyKey)
        {
            csp_multiplayer_EntityScript_OnPropertyChanged_void_int32_t_int32_t(_ptr, ComponentId, PropertyKey);
        }

        /// <summary>Runs the callback associated with the given message, if a subscription has been setup, and passes the given params.</summary>
        /// <param name="Message">The message to use.</param>
        /// <param name="MessageParamsJson">A JSON formatted string of parameters to be passed to the callback.</param>


        public void PostMessageToScript(string Message, string MessageParamsJson)
        {
            csp_multiplayer_EntityScript_PostMessageToScript_void_StringC_StringC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Message),
                WrapperHelper.StringToNativeUTF8(MessageParamsJson)
            );
        }

        /// <summary>Resets binding, context and subscriptions when the source is changed for the script.</summary>
        /// <param name="InScriptSource">The new source for the script.</param>


        public void OnSourceChanged(string InScriptSource)
        {
            csp_multiplayer_EntityScript_OnSourceChanged_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InScriptSource)
            );
        }

        /// <summary>Registers the script source for the related entity in the script system.</summary>


        public void RegisterSourceAsModule()
        {
            csp_multiplayer_EntityScript_RegisterSourceAsModule_void(_ptr);
        }

        /// <summary>Binds the related entity in the script system.</summary>


        public void Bind()
        {
            csp_multiplayer_EntityScript_Bind_void(_ptr);
        }

        /// <summary>Sets the owner of the script.</summary>
        /// <param name="ClientId">The ID of the client to be set as owner.</param>


        public void SetOwnerId(ulong ClientId)
        {
            csp_multiplayer_EntityScript_SetOwnerId_void_uint64_t(_ptr, ClientId);
        }

        /// <summary>Get the owner of the script.</summary>
        /// <returns>The client ID of the owner.</returns>


        public ulong GetOwnerId()
        {
            var _result = csp_multiplayer_EntityScript_GetOwnerIdC_uint64_t(_ptr);

            return _result;
        }

        /// <summary>Removes the script source and context from the script system.</summary>


        public void Shutdown()
        {
            csp_multiplayer_EntityScript_Shutdown_void(_ptr);
        }
    }
}

