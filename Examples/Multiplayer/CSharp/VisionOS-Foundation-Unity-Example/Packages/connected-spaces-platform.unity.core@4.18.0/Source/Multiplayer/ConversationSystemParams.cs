// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Class used to provide details of a conversation message that has been received whilst the client application is connected to a space.</summary>

    public class ConversationSystemParams : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_ConversationSystemParams";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.ConversationMessageType csp_multiplayer_ConversationSystemParams__Get_MessageType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSystemParams__Set_MessageType(
            IntPtr @class,
            Csp.Multiplayer.ConversationMessageType value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_ConversationSystemParams__Get_MessageValue(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSystemParams__Set_MessageValue(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ConversationSystemParams_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSystemParams_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal ConversationSystemParams(NativePointer ptr) : base(ptr) { }

        /// @brief The type of conversation message event.

        public Csp.Multiplayer.ConversationMessageType MessageType
        {
            get => csp_multiplayer_ConversationSystemParams__Get_MessageType(_ptr);
            set => csp_multiplayer_ConversationSystemParams__Set_MessageType(_ptr, value);
        }

        /// @brief The conversation message itself.

        public string MessageValue
        {
            get => WrapperHelper.NativeUTF8ToString(csp_multiplayer_ConversationSystemParams__Get_MessageValue(_ptr));
            set =>
                csp_multiplayer_ConversationSystemParams__Set_MessageValue(
                    _ptr,
                    WrapperHelper.StringToNativeUTF8(value)
                );
        }

        public ConversationSystemParams()
        {
            var np = csp_multiplayer_ConversationSystemParams_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~ConversationSystemParams()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_ConversationSystemParams_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

