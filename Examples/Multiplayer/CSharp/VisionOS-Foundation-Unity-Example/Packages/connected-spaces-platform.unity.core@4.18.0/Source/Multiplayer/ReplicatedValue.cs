// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>ReplicatedValue is an intermediate class that enables clients to pack data into types that are supported by Connected Spaces Platform</summary>
    /// <remarks>replication systems.</remarks>

    public class ReplicatedValue : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_ReplicatedValue";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_bool(bool InBoolValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_float(float InFloatValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_int64_t(long InLongValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_StringRC(string InStringValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_Vector3RC(IntPtr InVector3Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_Vector4RC(IntPtr InVector4Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_Ctor_ReplicatedValueRC(IntPtr Other);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.ReplicatedValueType csp_multiplayer_ReplicatedValue_GetReplicatedValueTypeC_ReplicatedValueType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_SetBool_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_ReplicatedValue_GetBoolC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_SetFloat_void_float(IntPtr @class, float InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_ReplicatedValue_GetFloatC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_SetInt_void_int64_t(IntPtr @class, long InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern long csp_multiplayer_ReplicatedValue_GetIntC_int64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_SetString_void_StringRC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_ReplicatedValue_GetStringC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_SetVector3_void_Vector3RC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_GetVector3C_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ReplicatedValue_SetVector4_void_Vector4RC(IntPtr @class, IntPtr InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ReplicatedValue_GetVector4C_Vector4RC(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal ReplicatedValue(NativePointer ptr) : base(ptr) { }

        /// <summary>A default ReplicatedValue will not have a valid type ("ReplicatedValueType::InvalidType"), and will have no internal value associated.</summary>
        /// <remarks>/// Do not use this constructor unless you know what you are doing!</remarks>

        public ReplicatedValue()
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a ReplicatedValue based on a bool type.</summary>
        /// <param name="InBoolValue">Initial value.</param>

        public ReplicatedValue(bool InBoolValue)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_bool(InBoolValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a ReplicatedValue based on a float type.</summary>
        /// <param name="InFloatValue">Initial value.</param>

        public ReplicatedValue(float InFloatValue)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_float(InFloatValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a ReplicatedValue based on a Long (uint64_t) type.</summary>
        /// <param name="InLongValue">Initial value.</param>

        public ReplicatedValue(long InLongValue)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_int64_t(InLongValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a ReplicatedValue based on an csp::common::String type.</summary>
        /// <param name="InStringValue">Initial value.</param>

        public ReplicatedValue(string InStringValue)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_StringRC(InStringValue);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a ReplicatedValue based on a csp::common::Vector3 type.</summary>
        /// <param name="InVector3Value">Initial value.</param>

        public ReplicatedValue(Csp.Common.Vector3 InVector3Value)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_Vector3RC(InVector3Value._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Construct a ReplicatedValue based on an csp::common::Vector4 type.</summary>
        /// <param name="InVector4Value">Initial value.</param>

        public ReplicatedValue(Csp.Common.Vector4 InVector4Value)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_Vector4RC(InVector4Value._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Copy constructor</summary>
        /// <param name="Other">The value to copy.</param>

        public ReplicatedValue(Csp.Multiplayer.ReplicatedValue Other)
        {
            var np = csp_multiplayer_ReplicatedValue_Ctor_ReplicatedValueRC(Other._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Destroys the replicated value instance.</summary>

        ~ReplicatedValue()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_ReplicatedValue_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Assignment operator overload.</summary>
        /// <param name="InValue">Other replicated value to set this one to.</param>


        /// <summary>Equality operator overload.</summary>
        /// <param name="ReplicatedValue">Other value to compare to.</param>


        /// <summary>Non equality operator overload.</summary>
        /// <param name="ReplicatedValue">Other value to compare to.</param>


        /// <summary>Gets the type of replicated value.</summary>
        /// <returns>Enum representing all supported replication base types.</returns>


        public Csp.Multiplayer.ReplicatedValueType GetReplicatedValueType()
        {
            var _result = csp_multiplayer_ReplicatedValue_GetReplicatedValueTypeC_ReplicatedValueType(_ptr);

            return _result;
        }

        /// <summary>Sets a bool value for this replicated value, will overwrite any previous value.</summary>
        /// <param name="InValu">InValue</param>


        public void SetBool(bool InValue)
        {
            csp_multiplayer_ReplicatedValue_SetBool_void_bool(_ptr, InValue);
        }

        /// <summary>Get a bool value from this replicated value, will assert if not a bool type.</summary>
        /// <remarks>/// Use ReplicatedValue::GetReplicatedValueType to ensure type before accessing.</remarks>
        /// <remarks>/// @return bool</remarks>


        public bool GetBool()
        {
            var _result = csp_multiplayer_ReplicatedValue_GetBoolC_bool(_ptr);

            return _result;
        }

        /// <summary>Sets a float value for this replicated value, will overwrite any previous value.</summary>
        /// <param name="InValu">InValue</param>


        public void SetFloat(float InValue)
        {
            csp_multiplayer_ReplicatedValue_SetFloat_void_float(_ptr, InValue);
        }

        /// <summary>Get a float value from this replicated value, will assert if not a float type.</summary>
        /// <remarks>/// Use ReplicatedValue::GetReplicatedValueType to ensure type before accessing.</remarks>
        /// <remarks>/// @return float value</remarks>


        public float GetFloat()
        {
            var _result = csp_multiplayer_ReplicatedValue_GetFloatC_float(_ptr);

            return _result;
        }

        /// <summary>Sets a int64 value for this replicated value, will overwrite any previous value.</summary>
        /// <param name="InValu">InValue</param>


        public void SetInt(long InValue)
        {
            csp_multiplayer_ReplicatedValue_SetInt_void_int64_t(_ptr, InValue);
        }

        /// <summary>Get a int64 value from this replicated value, will assert if not a int64 type.</summary>
        /// <remarks>/// Use ReplicatedValue::GetReplicatedValueType to ensure type before accessing.</remarks>
        /// <remarks>/// @return int64 value</remarks>


        public long GetInt()
        {
            var _result = csp_multiplayer_ReplicatedValue_GetIntC_int64_t(_ptr);

            return _result;
        }

        public void SetString(string InValue)
        {
            csp_multiplayer_ReplicatedValue_SetString_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(InValue));
        }

        /// <summary>Get a csp::common::String& value from this replicated value, will assert if not a csp::common::String type.</summary>
        /// <remarks>/// Use ReplicatedValue::GetReplicatedValueType to ensure type before accessing.</remarks>
        /// <remarks>/// @return csp::common::String&</remarks>


        public string GetString()
        {
            var _result = csp_multiplayer_ReplicatedValue_GetStringC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Set a Vector3 value for this replicated value from a csp::common::Vector3, will overwrite and previous value.</summary>


        public void SetVector3(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_ReplicatedValue_SetVector3_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// <summary>Get a csp::common::Vector3 value from this replicated value, will assert if not a csp::common::Vector3 type.</summary>
        /// <remarks>/// Use ReplicatedValue::GetReplicatedValueType to ensure type before accessing.</remarks>
        /// <remarks>/// @return csp::common::Vector3</remarks>


        public Csp.Common.Vector3 GetVector3()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_ReplicatedValue_GetVector3C_Vector3RC(_ptr));

            return _result;
        }

        /// <summary>Set a Vector4 value for this replicated value from a csp::common::Vector4, will overwrite and previous value.</summary>


        public void SetVector4(Csp.Common.Vector4 InValue)
        {
            csp_multiplayer_ReplicatedValue_SetVector4_void_Vector4RC(_ptr, InValue._ptr);
        }

        /// <summary>Get a csp::common::Vector4 value from this replicated value, will assert if not a csp::common::Vector4 type.</summary>
        /// <remarks>/// Use ReplicatedValue::GetReplicatedValueType to ensure type before accessing.</remarks>
        /// <remarks>/// @return csp::common::Vector4</remarks>


        public Csp.Common.Vector4 GetVector4()
        {
            var _result = new Csp.Common.Vector4(csp_multiplayer_ReplicatedValue_GetVector4C_Vector4RC(_ptr));

            return _result;
        }
    }
}

