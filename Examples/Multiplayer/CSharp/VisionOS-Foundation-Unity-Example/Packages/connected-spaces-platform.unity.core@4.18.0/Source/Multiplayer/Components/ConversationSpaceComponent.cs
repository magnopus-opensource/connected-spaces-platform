// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// @ingroup ConversationSpaceComponent
    /// <summary>Data representation of an ConversationSpaceComponent.</summary>

    public class ConversationSpaceComponent
        : Csp.Multiplayer.ComponentBase,
          Csp.Multiplayer.IPositionComponent,
          Csp.Multiplayer.IRotationComponent,
          IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_ConversationSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ConversationSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_CreateConversation_void_StringRC_StringResultCallback(
            IntPtr @class,
            string Message,
            CreateConversationCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_DeleteConversation_void_NullResultCallback(
            IntPtr @class,
            DeleteConversationCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_AddMessage_void_StringRC_MessageResultCallback(
            IntPtr @class,
            string Message,
            AddMessageCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_DeleteMessage_void_StringRC_NullResultCallback(
            IntPtr @class,
            string MessageId,
            DeleteMessageCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_GetMessage_void_StringRC_MessageResultCallback(
            IntPtr @class,
            string MessageId,
            GetMessageCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_GetAllMessages_void_MessageCollectionResultCallback(
            IntPtr @class,
            GetAllMessagesCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_GetConversationInfo_void_ConversationResultCallback(
            IntPtr @class,
            GetConversationInfoCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetConversationInfo_void_ConversationInfoRC_ConversationResultCallback(
            IntPtr @class,
            IntPtr ConversationData,
            SetConversationInfoCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_GetMessageInfo_void_StringRC_MessageResultCallback(
            IntPtr @class,
            string MessageId,
            GetMessageInfoCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetMessageInfo_void_StringRC_MessageInfoRC_MessageResultCallback(
            IntPtr @class,
            string MessageId,
            IntPtr MessageData,
            SetMessageInfoCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ConversationSpaceComponent_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetPosition_void_Vector3RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ConversationSpaceComponent_GetRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetRotation_void_Vector4RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_ConversationSpaceComponent_GetIsVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetIsVisible_void_bool(IntPtr @class, bool Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_ConversationSpaceComponent_GetIsActiveC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetIsActive_void_bool(IntPtr @class, bool Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_ConversationSpaceComponent_MoveConversationFromComponent_bool_ConversationSpaceComponentR(
            IntPtr @class,
            IntPtr OtherConversationComponent
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetTitle_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_ConversationSpaceComponent_GetTitleC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetDate_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_ConversationSpaceComponent_GetDateC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_SetNumberOfReplies_void_int64_tC(
            IntPtr @class,
            long Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern long csp_multiplayer_ConversationSpaceComponent_GetNumberOfRepliesC_int64_tC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ConversationSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal ConversationSpaceComponent(NativePointer ptr) : base(ptr) { }

        public ConversationSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        delegate void CreateConversationCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void DeleteConversationCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void AddMessageCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void DeleteMessageCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void GetMessageCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void GetAllMessagesCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void GetConversationInfoCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void SetConversationInfoCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void GetMessageInfoCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void SetMessageInfoCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        /// <summary>Constructs the conversation component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public ConversationSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_ConversationSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (CreateConversationCallbackDelegate))]
#endif
        static void CreateConversationCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.StringResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.StringResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly CreateConversationCallbackDelegate CreateConversationDelegateInstance =
            CreateConversationCallbackDelegateFunction;

        /// <summary>Create a new conversation</summary>
                /// <param name="Message">The message to be stored.</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.StringResult> CreateConversation(string Message)
        {
            var tcs = new TaskCompletionSource<Csp.Systems.StringResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_CreateConversation_void_StringRC_StringResultCallback(
                _ptr,
                Message,
                CreateConversationDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (DeleteConversationCallbackDelegate))]
#endif
        static void DeleteConversationCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.NullResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.NullResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly DeleteConversationCallbackDelegate DeleteConversationDelegateInstance =
            DeleteConversationCallbackDelegateFunction;

        /// <summary>Deletes all the messages that are part of the conversation</summary>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.NullResult> DeleteConversation()
        {
            var tcs = new TaskCompletionSource<Csp.Systems.NullResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_DeleteConversation_void_NullResultCallback(
                _ptr,
                DeleteConversationDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (AddMessageCallbackDelegate))]
#endif
        static void AddMessageCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.MessageResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.MessageResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly AddMessageCallbackDelegate AddMessageDelegateInstance = AddMessageCallbackDelegateFunction;

        /// <summary>Adds a message to conversation</summary>
                /// <remarks>Make sure that the user has entered a space through SpaceSystem::EnterSpace() before calling this.</remarks>
                /// <param name="Message">The message to be stored.</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.MessageResult> AddMessage(string Message)
        {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.MessageResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_AddMessage_void_StringRC_MessageResultCallback(
                _ptr,
                Message,
                AddMessageDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (DeleteMessageCallbackDelegate))]
#endif
        static void DeleteMessageCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.NullResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.NullResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly DeleteMessageCallbackDelegate DeleteMessageDelegateInstance =
            DeleteMessageCallbackDelegateFunction;

        /// <summary>Deletes a particular message</summary>
                /// <param name="MessageId">If of the message that will be deleted</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.NullResult> DeleteMessage(string MessageId)
        {
            var tcs = new TaskCompletionSource<Csp.Systems.NullResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_DeleteMessage_void_StringRC_NullResultCallback(
                _ptr,
                MessageId,
                DeleteMessageDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetMessageCallbackDelegate))]
#endif
        static void GetMessageCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.MessageResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.MessageResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetMessageCallbackDelegate GetMessageDelegateInstance = GetMessageCallbackDelegateFunction;

        /// <summary>Retrieves one particular message</summary>
                /// <param name="MessageId">Id of the message to be retrieved</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.MessageResult> GetMessage(string MessageId)
        {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.MessageResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_GetMessage_void_StringRC_MessageResultCallback(
                _ptr,
                MessageId,
                GetMessageDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetAllMessagesCallbackDelegate))]
#endif
        static void GetAllMessagesCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.MessageCollectionResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.MessageCollectionResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetAllMessagesCallbackDelegate GetAllMessagesDelegateInstance =
            GetAllMessagesCallbackDelegateFunction;

        /// <summary>Retrieves all messages in conversation</summary>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.MessageCollectionResult> GetAllMessages()
        {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.MessageCollectionResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_GetAllMessages_void_MessageCollectionResultCallback(
                _ptr,
                GetAllMessagesDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetConversationInfoCallbackDelegate))]
#endif
        static void GetConversationInfoCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.ConversationResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.ConversationResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetConversationInfoCallbackDelegate GetConversationInfoDelegateInstance =
            GetConversationInfoCallbackDelegateFunction;

        /// <summary>Get Conversation Info</summary>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.ConversationResult> GetConversationInfo()
        {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.ConversationResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_GetConversationInfo_void_ConversationResultCallback(
                _ptr,
                GetConversationInfoDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetConversationInfoCallbackDelegate))]
#endif
        static void SetConversationInfoCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.ConversationResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.ConversationResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly SetConversationInfoCallbackDelegate SetConversationInfoDelegateInstance =
            SetConversationInfoCallbackDelegateFunction;

        /// <summary>Set Conversation Info</summary>
                /// <param name="ConversationData">Conversation Information</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.ConversationResult> SetConversationInfo(
            Csp.Multiplayer.ConversationInfo ConversationData
        ) {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.ConversationResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_SetConversationInfo_void_ConversationInfoRC_ConversationResultCallback(
                _ptr,
                ConversationData._ptr,
                SetConversationInfoDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetMessageInfoCallbackDelegate))]
#endif
        static void GetMessageInfoCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.MessageResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.MessageResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetMessageInfoCallbackDelegate GetMessageInfoDelegateInstance =
            GetMessageInfoCallbackDelegateFunction;

        /// <summary>Get Message Info</summary>
                /// <param name="MessageId">Message id</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.MessageResult> GetMessageInfo(string MessageId)
        {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.MessageResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_GetMessageInfo_void_StringRC_MessageResultCallback(
                _ptr,
                MessageId,
                GetMessageInfoDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetMessageInfoCallbackDelegate))]
#endif
        static void SetMessageInfoCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.MessageResult>)_handle.Target;
            var _this = (ConversationSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.MessageResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly SetMessageInfoCallbackDelegate SetMessageInfoDelegateInstance =
            SetMessageInfoCallbackDelegateFunction;

        /// <summary>Set Message Info</summary>
                /// <param name="MessageId">Message id</param>
                /// <param name="MessageData">Conversation Information</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.MessageResult> SetMessageInfo(
            string MessageId,
            Csp.Multiplayer.MessageInfo MessageData
        ) {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.MessageResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_ConversationSpaceComponent_SetMessageInfo_void_StringRC_MessageInfoRC_MessageResultCallback(
                _ptr,
                MessageId,
                MessageData._ptr,
                SetMessageInfoDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

        /// <remarks>\addtogroup IPositionComponent</remarks>
        /// @{
        /// @copydoc IPositionComponent::GetPosition()


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(
                csp_multiplayer_ConversationSpaceComponent_GetPositionC_Vector3RC(_ptr)
            );

            return _result;
        }

        /// @copydoc IPositionComponent::SetPosition()


        public void SetPosition(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_ConversationSpaceComponent_SetPosition_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @}
        /// <remarks>\addtogroup IRotationComponent</remarks>
        /// @{
        /// @copydoc IRotationComponent::GetRotation()


        public Csp.Common.Vector4 GetRotation()
        {
            var _result = new Csp.Common.Vector4(
                csp_multiplayer_ConversationSpaceComponent_GetRotationC_Vector4RC(_ptr)
            );

            return _result;
        }

        /// @copydoc IRotationComponent::SetRotation()


        public void SetRotation(Csp.Common.Vector4 InValue)
        {
            csp_multiplayer_ConversationSpaceComponent_SetRotation_void_Vector4RC(_ptr, InValue._ptr);
        }

        /// @}


        public bool GetIsVisible()
        {
            var _result = csp_multiplayer_ConversationSpaceComponent_GetIsVisibleC_bool(_ptr);

            return _result;
        }

        public void SetIsVisible(bool Value)
        {
            csp_multiplayer_ConversationSpaceComponent_SetIsVisible_void_bool(_ptr, Value);
        }

        public bool GetIsActive()
        {
            var _result = csp_multiplayer_ConversationSpaceComponent_GetIsActiveC_bool(_ptr);

            return _result;
        }

        public void SetIsActive(bool Value)
        {
            csp_multiplayer_ConversationSpaceComponent_SetIsActive_void_bool(_ptr, Value);
        }

        /// <summary>Moves the conversation associated with the other component to this one and remmove the association with the other component</summary>
        /// <param name="OtherConversationComponent">- The component to move the conversation from.</param>
        /// <returns>True if successful, false if there is already a conversation associated with this component</returns>


        public bool MoveConversationFromComponent(Csp.Multiplayer.ConversationSpaceComponent OtherConversationComponent)
        {
            var _result =
                csp_multiplayer_ConversationSpaceComponent_MoveConversationFromComponent_bool_ConversationSpaceComponentR(
                    _ptr,
                    OtherConversationComponent._ptr
                );

            return _result;
        }

        /// <summary>Sets the Title of the conversation.</summary>
        /// <param name="Value">- The new title.</param>


        public void SetTitle(string Value)
        {
            csp_multiplayer_ConversationSpaceComponent_SetTitle_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the Title of the conversation.</summary>


        public string GetTitle()
        {
            var _result = csp_multiplayer_ConversationSpaceComponent_GetTitleC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the Date of the conversation.</summary>
        /// <param name="Value">- The new Date.</param>


        public void SetDate(string Value)
        {
            csp_multiplayer_ConversationSpaceComponent_SetDate_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the Date of the conversation.</summary>


        public string GetDate()
        {
            var _result = csp_multiplayer_ConversationSpaceComponent_GetDateC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the Number Of Replies of the conversation.</summary>
        /// <param name="Value">- The new Number Of Replies.</param>


        public void SetNumberOfReplies(long Value)
        {
            csp_multiplayer_ConversationSpaceComponent_SetNumberOfReplies_void_int64_tC(_ptr, Value);
        }

        /// <summary>Gets the Number Of Replies of the conversation.</summary>


        public long GetNumberOfReplies()
        {
            var _result = csp_multiplayer_ConversationSpaceComponent_GetNumberOfRepliesC_int64_tC(_ptr);

            return _result;
        }

        ~ConversationSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_ConversationSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

