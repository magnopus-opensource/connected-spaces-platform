// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Primary multiplayer object that can have associated scripts and many multiplayer components created within it.</summary>

    public partial class SpaceEntity : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_SpaceEntity";

        #region P/Invoke
#pragma warning disable IDE1006

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetUpdateCallback_void_UpdateCallback(
            IntPtr @class,
            SetUpdateCallbackCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetDestroyCallback_void_DestroyCallback(
            IntPtr @class,
            SetDestroyCallbackCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetPatchSentCallback_void_CallbackHandler(
            IntPtr @class,
            SetPatchSentCallbackCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_Ctor_SpaceEntitySystemP(IntPtr InEntitySystem);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntity_GetIdC_uint64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntity_GetOwnerIdC_uint64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_SpaceEntity_GetNameC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetName_void_StringRC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetTransformC_SpaceTransformRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetPosition_void_Vector3RC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetRotation_void_Vector4RC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetScaleC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetScale_void_Vector3RC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntity_GetIsTransientC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_SpaceEntity_GetThirdPartyRefC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetThirdPartyRef_void_StringRC(
            IntPtr @class,
            IntPtr InThirdPartyRef
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Systems.EThirdPartyPlatform csp_multiplayer_SpaceEntity_GetThirdPartyPlatformTypeC_EThirdPartyPlatformC(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SetThirdPartyPlatformType_void_EThirdPartyPlatformC(
            IntPtr @class,
            Csp.Systems.EThirdPartyPlatform InThirdPartyPlatformType
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.SpaceEntityType csp_multiplayer_SpaceEntity_GetEntityTypeC_SpaceEntityType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetSpaceEntitySystem_SpaceEntitySystemP(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_QueueUpdate_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_Destroy_void_CallbackHandler(
            IntPtr @class,
            DestroyCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetComponentsC_MapPC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetComponent_ComponentBaseP_uint16_t(
            IntPtr @class,
            ushort Key
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_AddComponent_ComponentBaseP_ComponentType(
            IntPtr @class,
            Csp.Multiplayer.ComponentType Type
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_RemoveComponent_void_uint16_t(IntPtr @class, ushort Key);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SerialisePatchC_void_IEntitySerialiserR(
            IntPtr @class,
            IntPtr Serialiser
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_Serialise_void_IEntitySerialiserR(
            IntPtr @class,
            IntPtr Serialiser
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_SerialiseComponentC_void_IEntitySerialiserR_ComponentBaseP(
            IntPtr @class,
            IntPtr Serialiser,
            IntPtr Component
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntity_Deserialise_void_IEntityDeserialiserR(
            IntPtr @class,
            IntPtr Deserialiser
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntity_GetScript_EntityScriptP(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntity_IsSelectedC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntity_GetSelectingClientIDC_uint64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntity_Select_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntity_Deselect_bool(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal SpaceEntity(NativePointer ptr) : base(ptr) { }

        delegate void DestroyCallbackDelegate(IntPtr _StateObject__, bool arg1);

        delegate void SetUpdateCallbackCallbackDelegate(
            IntPtr _StateObject__,
            NativePointer arg1,
            Csp.Multiplayer.SpaceEntityUpdateFlags arg2,
            NativePointer arg3
        );

        delegate void SetDestroyCallbackCallbackDelegate(IntPtr _StateObject__, bool arg1);

        delegate void SetPatchSentCallbackCallbackDelegate(IntPtr _StateObject__, bool arg1);

        readonly List<GCHandle> eventHandles = new List<GCHandle>();

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetUpdateCallbackCallbackDelegate))]
#endif
        static void SetUpdateCallbackCallbackDelegateFunction(
            IntPtr _StateObject__,
            NativePointer _arg1,
            Csp.Multiplayer.SpaceEntityUpdateFlags _arg2,
            NativePointer _arg3
        ) {
            var _handle = (GCHandle)_StateObject__;
            var _this = (SpaceEntity)_handle.Target;
            _this.RealOnUpdate?.Invoke(
                _this,
                (
                    new Csp.Multiplayer.SpaceEntity(_arg1),
                    _arg2,
                    new Csp.Common.Array<Csp.Multiplayer.ComponentUpdateInfo>(_arg3)
                )
            );
        }

        static readonly SetUpdateCallbackCallbackDelegate OnUpdateDelegateInstance =
            SetUpdateCallbackCallbackDelegateFunction;

        bool OnUpdateInitialised = false;
        event EventHandler<(Csp.Multiplayer.SpaceEntity arg1, Csp.Multiplayer.SpaceEntityUpdateFlags arg2, Csp.Common.Array<Csp.Multiplayer.ComponentUpdateInfo> arg3)>? RealOnUpdate;
        public event EventHandler<(Csp.Multiplayer.SpaceEntity arg1, Csp.Multiplayer.SpaceEntityUpdateFlags arg2, Csp.Common.Array<Csp.Multiplayer.ComponentUpdateInfo> arg3)> OnUpdate
        {
            add
            {
                if (!OnUpdateInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_multiplayer_SpaceEntity_SetUpdateCallback_void_UpdateCallback(
                        _ptr,
                        OnUpdateDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnUpdateInitialised = true;
                }

                RealOnUpdate += value;
            }
            remove { RealOnUpdate -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetDestroyCallbackCallbackDelegate))]
#endif
        static void SetDestroyCallbackCallbackDelegateFunction(IntPtr _StateObject__, bool _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (SpaceEntity)_handle.Target;
            _this.RealOnDestroy?.Invoke(_this, _arg1);
        }

        static readonly SetDestroyCallbackCallbackDelegate OnDestroyDelegateInstance =
            SetDestroyCallbackCallbackDelegateFunction;

        bool OnDestroyInitialised = false;
        event EventHandler<bool>? RealOnDestroy;
        public event EventHandler<bool> OnDestroy
        {
            add
            {
                if (!OnDestroyInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_multiplayer_SpaceEntity_SetDestroyCallback_void_DestroyCallback(
                        _ptr,
                        OnDestroyDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnDestroyInitialised = true;
                }

                RealOnDestroy += value;
            }
            remove { RealOnDestroy -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetPatchSentCallbackCallbackDelegate))]
#endif
        static void SetPatchSentCallbackCallbackDelegateFunction(IntPtr _StateObject__, bool _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (SpaceEntity)_handle.Target;
            _this.RealOnPatchSent?.Invoke(_this, _arg1);
        }

        static readonly SetPatchSentCallbackCallbackDelegate OnPatchSentDelegateInstance =
            SetPatchSentCallbackCallbackDelegateFunction;

        bool OnPatchSentInitialised = false;
        event EventHandler<bool>? RealOnPatchSent;
        public event EventHandler<bool> OnPatchSent
        {
            add
            {
                if (!OnPatchSentInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_multiplayer_SpaceEntity_SetPatchSentCallback_void_CallbackHandler(
                        _ptr,
                        OnPatchSentDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnPatchSentInitialised = true;
                }

                RealOnPatchSent += value;
            }
            remove { RealOnPatchSent -= value; }
        }

        /// <summary>Creates a default instance of a SpaceEntity.</summary>

        public SpaceEntity()
        {
            var np = csp_multiplayer_SpaceEntity_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Creates a SpaceEntity instance using the space entity system provided.</summary>

        public SpaceEntity(Csp.Multiplayer.SpaceEntitySystem InEntitySystem)
        {
            var np = csp_multiplayer_SpaceEntity_Ctor_SpaceEntitySystemP(InEntitySystem._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Destroys the SpaceEntity instance.</summary>

        ~SpaceEntity()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_SpaceEntity_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Get the ID of this SpaceEntity, this is generated by the endpoints and should be unique to each Entity.</summary>
        /// <returns>The uint64_t ID of the SpaceEntity.</returns>


        public ulong GetId()
        {
            var _result = csp_multiplayer_SpaceEntity_GetIdC_uint64_t(_ptr);

            return _result;
        }

        /// <summary>Get the ClientID of the owner of the SpaceEntity.</summary>
        /// <remarks>/// This starts as the user that creates the Entity but can change if another user patches the Entity.</remarks>
        /// <remarks>/// @return the uint64_t ClientID of the owner of the SpaceEntity.</remarks>


        public ulong GetOwnerId()
        {
            var _result = csp_multiplayer_SpaceEntity_GetOwnerIdC_uint64_t(_ptr);

            return _result;
        }

        /// <summary>Get the name set for this SpaceEntity.</summary>
        /// <returns>Name.</returns>


        public string GetName()
        {
            var _result = csp_multiplayer_SpaceEntity_GetNameC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Set the name of the SpaceEntity.</summary>
        /// <param name="Value">The name to set.</param>


        public void SetName(string Value)
        {
            csp_multiplayer_SpaceEntity_SetName_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(Value));
        }

        /// <summary>Get the SpaceTransform of the SpaceEntity.</summary>
        /// <returns>SpaceTransform.</returns>


        public Csp.Multiplayer.SpaceTransform GetTransform()
        {
            var _result = new Csp.Multiplayer.SpaceTransform(
                csp_multiplayer_SpaceEntity_GetTransformC_SpaceTransformRC(_ptr)
            );

            return _result;
        }

        /// <summary>Get the position of the SpaceEntity, in world space.</summary>
        /// <returns>Position.</returns>


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_SpaceEntity_GetPositionC_Vector3RC(_ptr));

            return _result;
        }

        /// <summary>Set the position of the SpaceEntity, in world space.</summary>
        /// <param name="Value">The position to set.</param>


        public void SetPosition(Csp.Common.Vector3 Value)
        {
            csp_multiplayer_SpaceEntity_SetPosition_void_Vector3RC(_ptr, Value._ptr);
        }

        /// <summary>Get the rotation of the SpaceEntity.</summary>
        /// <returns>Rotation.</returns>


        public Csp.Common.Vector4 GetRotation()
        {
            var _result = new Csp.Common.Vector4(csp_multiplayer_SpaceEntity_GetRotationC_Vector4RC(_ptr));

            return _result;
        }

        /// <summary>Set the rotation of the SpaceEntity.</summary>
        /// <param name="Value">The rotation to set.</param>


        public void SetRotation(Csp.Common.Vector4 Value)
        {
            csp_multiplayer_SpaceEntity_SetRotation_void_Vector4RC(_ptr, Value._ptr);
        }

        /// <summary>Get the scale of the SpaceEntity.</summary>
        /// <returns>Scale.</returns>


        public Csp.Common.Vector3 GetScale()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_SpaceEntity_GetScaleC_Vector3RC(_ptr));

            return _result;
        }

        /// <summary>Set the scale of the SpaceEntity.</summary>
        /// <param name="Value">The scale to set.</param>


        public void SetScale(Csp.Common.Vector3 Value)
        {
            csp_multiplayer_SpaceEntity_SetScale_void_Vector3RC(_ptr, Value._ptr);
        }

        /// <summary>Get whether the space is transient or persistant.</summary>
        /// <returns>Returns true if the space is transient and false if it is marked as persistant.</returns>


        public bool GetIsTransient()
        {
            var _result = csp_multiplayer_SpaceEntity_GetIsTransientC_bool(_ptr);

            return _result;
        }

        /// <summary>Get the third party reference of this entity.</summary>
        /// <returns>A string representing the third party reference set for this entity.</returns>


        public string GetThirdPartyRef()
        {
            var _result = csp_multiplayer_SpaceEntity_GetThirdPartyRefC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Set the third party reference for this entity</summary>
        /// <param name="InThirdPartyRef">The third party reference to set.</param>


        public void SetThirdPartyRef(string InThirdPartyRef)
        {
            csp_multiplayer_SpaceEntity_SetThirdPartyRef_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InThirdPartyRef)
            );
        }

        /// <summary>Get the third party platform type of this entity.</summary>
        /// <returns>A string representing third party platform type set for this entity.</returns>


        public Csp.Systems.EThirdPartyPlatform GetThirdPartyPlatformType()
        {
            var _result = csp_multiplayer_SpaceEntity_GetThirdPartyPlatformTypeC_EThirdPartyPlatformC(_ptr);

            return _result;
        }

        /// <summary>Set third party platform type for this entity.</summary>
        /// <param name="InThirdPartyPlatformType">The third party platform type to set.</param>


        public void SetThirdPartyPlatformType(Csp.Systems.EThirdPartyPlatform InThirdPartyPlatformType)
        {
            csp_multiplayer_SpaceEntity_SetThirdPartyPlatformType_void_EThirdPartyPlatformC(
                _ptr,
                InThirdPartyPlatformType
            );
        }

        /// <summary>Get the type of the Entity.</summary>
        /// <returns>The SpaceEntityType enum value.</returns>


        public Csp.Multiplayer.SpaceEntityType GetEntityType()
        {
            var _result = csp_multiplayer_SpaceEntity_GetEntityTypeC_SpaceEntityType(_ptr);

            return _result;
        }

        /// <summary>Get SpaceEntitySystem Object</summary>
        /// <returns>SpaceEntitySystem</returns>


        public Csp.Multiplayer.SpaceEntitySystem GetSpaceEntitySystem()
        {
            var _result = new Csp.Multiplayer.SpaceEntitySystem(
                csp_multiplayer_SpaceEntity_GetSpaceEntitySystem_SpaceEntitySystemP(_ptr)
            );

            return _result;
        }

        /// <summary>Queues an update which will be executed on next Tick() or ProcessPendingEntityOperations(). Not a blocking or async function.</summary>


        public void QueueUpdate()
        {
            csp_multiplayer_SpaceEntity_QueueUpdate_void(_ptr);
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (DestroyCallbackDelegate))]
#endif
        static void DestroyCallbackDelegateFunction(IntPtr _StateObject__, bool _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<bool>)_handle.Target;
            var _this = (SpaceEntity)tcs.Task.AsyncState;

            var task_result = _arg1;

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly DestroyCallbackDelegate DestroyDelegateInstance = DestroyCallbackDelegateFunction;

        /// <summary>Sends a patch message with a flag to destroy the entity.</summary>
                /// <remarks>/// Will remove the entity from endpoints and signal remote clients to delete the entity.</remarks>
                /// <remarks>Note this will trigger local deletion of the SpaceEntity immediately, without considering if remotes were able to also delete.</remarks>
                /// <remarks>If the endpoint fails to process this message, the client that called this function will be out of sync.</remarks>
                /// <remarks>It is advised to handle this situation by dropping the client out of a space if the callback comes back as failed.</remarks>
                /// <returns>The result for the request</returns>

        public Task<bool> Destroy()
        {
            var tcs = new TaskCompletionSource<bool>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_SpaceEntity_Destroy_void_CallbackHandler(_ptr, DestroyDelegateInstance, (IntPtr)handle);

            return tcs.Task;
        }

        /// <summary>Get the map of components on this SpaceEntity.</summary>
        /// <returns>A map of components indexed with the component ID.</returns>


        public Csp.Common.Map<ushort, Csp.Multiplayer.ComponentBase> GetComponents()
        {
            var _result = new Csp.Common.Map<ushort, Csp.Multiplayer.ComponentBase>(
                csp_multiplayer_SpaceEntity_GetComponentsC_MapPC(_ptr)
            );

            return _result;
        }

        /// <summary>Get a component on this SpaceEntity by the specified key.</summary>
        /// <param name="Key">The component ID for the desired component.</param>
        /// <returns>The component if found or nullptr if not found.</returns>


        public Csp.Multiplayer.ComponentBase GetComponent(ushort Key)
        {
            var _result = new Csp.Multiplayer.ComponentBase(
                csp_multiplayer_SpaceEntity_GetComponent_ComponentBaseP_uint16_t(_ptr, Key)
            );

            return _result;
        }

        /// <summary>Add a component of the given type.</summary>
        /// <param name="Type">The type of component to add.</param>
        /// <returns>The newly created component.</returns>


        public Csp.Multiplayer.ComponentBase AddComponent(Csp.Multiplayer.ComponentType Type)
        {
            var _result = new Csp.Multiplayer.ComponentBase(
                csp_multiplayer_SpaceEntity_AddComponent_ComponentBaseP_ComponentType(_ptr, Type)
            );

            return _result;
        }

        /// <summary>Remove a component of the given key.</summary>
        /// <remarks>/// Note that the component cannot currently truly be removed from the server data,</remarks>
        /// <remarks>the best we can do is add a blank component in its place, which clients decide to</remarks>
        /// <remarks>ignore when retrieving data.</remarks>
        /// <remarks>/// @param Key uint16_t : The component ID of the component to remove.</remarks>


        public void RemoveComponent(ushort Key)
        {
            csp_multiplayer_SpaceEntity_RemoveComponent_void_uint16_t(_ptr, Key);
        }

        /// <summary>Serialise local changes into patch message format into the given serialiser. Does not send a patch.</summary>
        /// <param name="Serialiser">The serialiser to use.</param>


        public void SerialisePatch(Csp.Multiplayer.IEntitySerialiser Serialiser)
        {
            csp_multiplayer_SpaceEntity_SerialisePatchC_void_IEntitySerialiserR(
                _ptr,
                ((NativeClassWrapper)Serialiser)._ptr
            );
        }

        /// <summary>Serialise the entire SpaceEntity into object message format into the given serialiser. Does not send a message.</summary>
        /// <param name="Serialiser">The serialiser to use.</param>


        public void Serialise(Csp.Multiplayer.IEntitySerialiser Serialiser)
        {
            csp_multiplayer_SpaceEntity_Serialise_void_IEntitySerialiserR(_ptr, ((NativeClassWrapper)Serialiser)._ptr);
        }

        /// <summary>Serialises a given component into a consistent format for the given serialiser.</summary>
        /// <param name="Serialiser">The serialiser to use.</param>
        /// <param name="Component">The component to be serialised.</param>


        public void SerialiseComponent(
            Csp.Multiplayer.IEntitySerialiser Serialiser,
            Csp.Multiplayer.ComponentBase Component
        ) {
            csp_multiplayer_SpaceEntity_SerialiseComponentC_void_IEntitySerialiserR_ComponentBaseP(
                _ptr,
                ((NativeClassWrapper)Serialiser)._ptr,
                Component._ptr
            );
        }

        /// <summary>Using the given deserialiser, populate the SpaceEntity with the data in the deserialiser.</summary>
        /// <param name="Deserialiser">The deserialiser to use.</param>


        public void Deserialise(Csp.Multiplayer.IEntityDeserialiser Deserialiser)
        {
            csp_multiplayer_SpaceEntity_Deserialise_void_IEntityDeserialiserR(
                _ptr,
                ((NativeClassWrapper)Deserialiser)._ptr
            );
        }

        /// <summary>Gets the script associated with the space entity.</summary>
        /// <returns>The EntityScript instance set on the entity.</returns>


        public Csp.Multiplayer.EntityScript GetScript()
        {
            var _result = new Csp.Multiplayer.EntityScript(csp_multiplayer_SpaceEntity_GetScript_EntityScriptP(_ptr));

            return _result;
        }

        /// <summary>Returns the selection state of the entity.</summary>
        /// <returns>Selection state of the entity, Selected = True, Deselected = False.</returns>


        public bool IsSelected()
        {
            var _result = csp_multiplayer_SpaceEntity_IsSelectedC_bool(_ptr);

            return _result;
        }

        /// <summary>Retrieve the ClientID for the Selecting Client.</summary>
        /// <returns>The client ID of the selecting client. Deselected Entity = 0.</returns>


        public ulong GetSelectingClientID()
        {
            var _result = csp_multiplayer_SpaceEntity_GetSelectingClientIDC_uint64_t(_ptr);

            return _result;
        }

        /// <summary>Select the Entity. Only works if the Entity is currently deselected.</summary>
        /// <returns>True if selection occurred. False if not.</returns>


        public bool Select()
        {
            var _result = csp_multiplayer_SpaceEntity_Select_bool(_ptr);

            return _result;
        }

        /// <summary>Deselect the Entity.</summary>
        /// <remarks>/// Only works if:</remarks>
        /// <remarks>- The Entity is currently selected</remarks>
        /// <remarks>- The Client attempting to deselect has the same ClientID as the one who selected it</remarks>
        /// <remarks>/// @return True if deselection occurred. False if not.</remarks>


        public bool Deselect()
        {
            var _result = csp_multiplayer_SpaceEntity_Deselect_bool(_ptr);

            return _result;
        }
    }
}

