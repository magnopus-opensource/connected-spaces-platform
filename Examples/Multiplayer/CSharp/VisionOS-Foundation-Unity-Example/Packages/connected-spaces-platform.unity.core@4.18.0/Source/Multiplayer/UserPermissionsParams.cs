// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Class used to provide details of a permission change that has happened to a user whilst the client application is connected to a space.</summary>

    public class UserPermissionsParams : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_UserPermissionsParams";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_UserPermissionsParams__Get_SpaceId(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_UserPermissionsParams__Set_SpaceId(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_UserPermissionsParams__Get_UserRoles(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_UserPermissionsParams__Set_UserRoles(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.EPermissionChangeType csp_multiplayer_UserPermissionsParams__Get_ChangeType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_UserPermissionsParams__Set_ChangeType(
            IntPtr @class,
            Csp.Multiplayer.EPermissionChangeType value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_UserPermissionsParams__Get_UserId(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_UserPermissionsParams__Set_UserId(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_UserPermissionsParams_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_UserPermissionsParams_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal UserPermissionsParams(NativePointer ptr) : base(ptr) { }

        /// @brief The unique identifier of the space for which a user's permissions have changed.

        public string SpaceId
        {
            get => WrapperHelper.NativeUTF8ToString(csp_multiplayer_UserPermissionsParams__Get_SpaceId(_ptr));
            set => csp_multiplayer_UserPermissionsParams__Set_SpaceId(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief The roles that a user has for the given space

        public Csp.Common.Array<Csp.Systems.SpaceUserRole> UserRoles
        {
            get =>
                new Csp.Common.Array<Csp.Systems.SpaceUserRole>(
                    csp_multiplayer_UserPermissionsParams__Get_UserRoles(_ptr)
                );
            set => csp_multiplayer_UserPermissionsParams__Set_UserRoles(_ptr, value._ptr);
        }

        /// @brief The type of permissions change that has occurred the user.

        public Csp.Multiplayer.EPermissionChangeType ChangeType
        {
            get => csp_multiplayer_UserPermissionsParams__Get_ChangeType(_ptr);
            set => csp_multiplayer_UserPermissionsParams__Set_ChangeType(_ptr, value);
        }

        /// @brief The unique identifier of the user whose permissions have been changed.

        public string UserId
        {
            get => WrapperHelper.NativeUTF8ToString(csp_multiplayer_UserPermissionsParams__Get_UserId(_ptr));
            set => csp_multiplayer_UserPermissionsParams__Set_UserId(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        public UserPermissionsParams()
        {
            var np = csp_multiplayer_UserPermissionsParams_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~UserPermissionsParams()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_UserPermissionsParams_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

