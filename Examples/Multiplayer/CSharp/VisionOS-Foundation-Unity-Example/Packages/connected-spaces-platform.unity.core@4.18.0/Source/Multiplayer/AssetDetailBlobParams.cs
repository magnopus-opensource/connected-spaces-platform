// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Describes the changes an asset has undergone when the client application is connected to a space.</summary>

    public class AssetDetailBlobParams : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_AssetDetailBlobParams";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.EAssetChangeType csp_multiplayer_AssetDetailBlobParams__Get_ChangeType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AssetDetailBlobParams__Set_ChangeType(
            IntPtr @class,
            Csp.Multiplayer.EAssetChangeType value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AssetDetailBlobParams__Get_AssetId(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AssetDetailBlobParams__Set_AssetId(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AssetDetailBlobParams__Get_Version(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AssetDetailBlobParams__Set_Version(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Systems.EAssetType csp_multiplayer_AssetDetailBlobParams__Get_AssetType(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AssetDetailBlobParams__Set_AssetType(
            IntPtr @class,
            Csp.Systems.EAssetType value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AssetDetailBlobParams__Get_AssetCollectionId(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AssetDetailBlobParams__Set_AssetCollectionId(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AssetDetailBlobParams_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AssetDetailBlobParams_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal AssetDetailBlobParams(NativePointer ptr) : base(ptr) { }

        /// @brief The type of change this asset has undergone.

        public Csp.Multiplayer.EAssetChangeType ChangeType
        {
            get => csp_multiplayer_AssetDetailBlobParams__Get_ChangeType(_ptr);
            set => csp_multiplayer_AssetDetailBlobParams__Set_ChangeType(_ptr, value);
        }

        /// @brief The unique identifer of the asset that has changed.

        public string AssetId
        {
            get => WrapperHelper.NativeUTF8ToString(csp_multiplayer_AssetDetailBlobParams__Get_AssetId(_ptr));
            set => csp_multiplayer_AssetDetailBlobParams__Set_AssetId(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief The current version of the asset that has changed.

        public string Version
        {
            get => WrapperHelper.NativeUTF8ToString(csp_multiplayer_AssetDetailBlobParams__Get_Version(_ptr));
            set => csp_multiplayer_AssetDetailBlobParams__Set_Version(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief The type of the asset that has changed.

        public Csp.Systems.EAssetType AssetType
        {
            get => csp_multiplayer_AssetDetailBlobParams__Get_AssetType(_ptr);
            set => csp_multiplayer_AssetDetailBlobParams__Set_AssetType(_ptr, value);
        }

        /// @brief The unique identifer of the asset collection the asset that has changed belongs to.

        public string AssetCollectionId
        {
            get => WrapperHelper.NativeUTF8ToString(csp_multiplayer_AssetDetailBlobParams__Get_AssetCollectionId(_ptr));
            set =>
                csp_multiplayer_AssetDetailBlobParams__Set_AssetCollectionId(
                    _ptr,
                    WrapperHelper.StringToNativeUTF8(value)
                );
        }

        public AssetDetailBlobParams()
        {
            var np = csp_multiplayer_AssetDetailBlobParams_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~AssetDetailBlobParams()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_AssetDetailBlobParams_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

