// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// @ingroup LightSpaceComponent
    /// <summary>Data representation of an LightSpaceComponent.</summary>

    public class LightSpaceComponent
        : Csp.Multiplayer.ComponentBase,
          Csp.Multiplayer.IPositionComponent,
          Csp.Multiplayer.IRotationComponent,
          Csp.Multiplayer.IThirdPartyComponentRef,
          Csp.Multiplayer.IVisibleComponent,
          IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_LightSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_LightSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.LightType csp_multiplayer_LightSpaceComponent_GetLightTypeC_LightType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetLightType_void_LightType(
            IntPtr @class,
            Csp.Multiplayer.LightType Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.LightShadowType csp_multiplayer_LightSpaceComponent_GetLightShadowTypeC_LightShadowType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetLightShadowType_void_LightShadowType(
            IntPtr @class,
            Csp.Multiplayer.LightShadowType Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_LightSpaceComponent_GetColorC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetColor_void_Vector3RC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_LightSpaceComponent_GetIntensityC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetIntensity_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_LightSpaceComponent_GetRangeC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetRange_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_LightSpaceComponent_GetInnerConeAngleC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetInnerConeAngle_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_LightSpaceComponent_GetOuterConeAngleC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetOuterConeAngle_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_LightSpaceComponent_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetPosition_void_Vector3RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_LightSpaceComponent_GetRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetRotation_void_Vector4RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_LightSpaceComponent_GetLightCookieAssetIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetLightCookieAssetId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_LightSpaceComponent_GetLightCookieAssetCollectionIdC_StringRC(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetLightCookieAssetCollectionId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.LightCookieType csp_multiplayer_LightSpaceComponent_GetLightCookieTypeC_LightCookieType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetLightCookieType_void_LightCookieType(
            IntPtr @class,
            Csp.Multiplayer.LightCookieType Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_LightSpaceComponent_GetIsVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetIsVisible_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_LightSpaceComponent_GetIsARVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetIsARVisible_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_LightSpaceComponent_GetThirdPartyComponentRefC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_SetThirdPartyComponentRef_void_StringRC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_LightSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal LightSpaceComponent(NativePointer ptr) : base(ptr) { }

        public LightSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the light space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public LightSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_LightSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Gets the type of light of this light component.</summary>
        /// <returns>The type of light of this light component.</returns>


        public Csp.Multiplayer.LightType GetLightType()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetLightTypeC_LightType(_ptr);

            return _result;
        }

        /// <summary>Sets the type of light of this light component.</summary>
        /// <param name="Value">The type of light of this light component.</param>


        public void SetLightType(Csp.Multiplayer.LightType Value)
        {
            csp_multiplayer_LightSpaceComponent_SetLightType_void_LightType(_ptr, Value);
        }

        /// <summary>Gets the type of light shadow of this light component.</summary>
        /// <returns>The type of light shadow of this light component.</returns>


        public Csp.Multiplayer.LightShadowType GetLightShadowType()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetLightShadowTypeC_LightShadowType(_ptr);

            return _result;
        }

        /// <summary>Sets the type of light shadow of this light component.</summary>
        /// <param name="Value">The type of light shadow of this light component.</param>


        public void SetLightShadowType(Csp.Multiplayer.LightShadowType Value)
        {
            csp_multiplayer_LightSpaceComponent_SetLightShadowType_void_LightShadowType(_ptr, Value);
        }

        /// <summary>Gets the color of the light of this component.</summary>
        /// <returns>The color of the light of this component.</returns>


        public Csp.Common.Vector3 GetColor()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_LightSpaceComponent_GetColorC_Vector3RC(_ptr));

            return _result;
        }

        /// <summary>Sets the color of the light of this component.</summary>
        /// <param name="Value">The color of the light of this component.</param>


        public void SetColor(Csp.Common.Vector3 Value)
        {
            csp_multiplayer_LightSpaceComponent_SetColor_void_Vector3RC(_ptr, Value._ptr);
        }

        /// <summary>Gets the intensity of the light of this component.</summary>
        /// <returns>The intensity of the light of this component.</returns>


        public float GetIntensity()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetIntensityC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the intensity of the light of this component.</summary>
        /// <param name="Value">The intensity of the light of this component.</param>


        public void SetIntensity(float Value)
        {
            csp_multiplayer_LightSpaceComponent_SetIntensity_void_float(_ptr, Value);
        }

        /// <summary>Gets the range within which the light of this component affects the surrounding 3D scene.</summary>
        /// <returns>The range within which the light of this component affects the surrounding 3D scene.</returns>


        public float GetRange()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetRangeC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the range within which the light of this component affects the surrounding 3D scene.</summary>
        /// <param name="Value">The range within which the light of this component affects the surrounding 3D scene.</param>


        public void SetRange(float Value)
        {
            csp_multiplayer_LightSpaceComponent_SetRange_void_float(_ptr, Value);
        }

        /// <summary>Gets the angle of the inner cone in a spotlight.</summary>
        /// <returns>The angle of the inner cone in a spotlight.</returns>


        public float GetInnerConeAngle()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetInnerConeAngleC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the angle of the inner cone in a spotlight.</summary>
        /// <param name="Value">The angle of the inner cone in a spotlight.</param>


        public void SetInnerConeAngle(float Value)
        {
            csp_multiplayer_LightSpaceComponent_SetInnerConeAngle_void_float(_ptr, Value);
        }

        /// <summary>Gets the angle of the outer cone in a spotlight.</summary>
        /// <returns>The angle of the outer cone in a spotlight.</returns>


        public float GetOuterConeAngle()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetOuterConeAngleC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the angle of the outer cone in a spotlight.</summary>
        /// <param name="Value">The angle of the outer cone in a spotlight.</param>


        public void SetOuterConeAngle(float Value)
        {
            csp_multiplayer_LightSpaceComponent_SetOuterConeAngle_void_float(_ptr, Value);
        }

        /// <remarks>\addtogroup IPositionComponent</remarks>
        /// @{
        /// @copydoc IPositionComponent::GetPosition()


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_LightSpaceComponent_GetPositionC_Vector3RC(_ptr));

            return _result;
        }

        /// @copydoc IPositionComponent::SetPosition()


        public void SetPosition(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_LightSpaceComponent_SetPosition_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @}
        /// <remarks>\addtogroup IRotationComponent</remarks>
        /// @{
        /// @copydoc IRotationComponent::GetRotation()


        public Csp.Common.Vector4 GetRotation()
        {
            var _result = new Csp.Common.Vector4(csp_multiplayer_LightSpaceComponent_GetRotationC_Vector4RC(_ptr));

            return _result;
        }

        /// @copydoc IRotationComponent::SetRotation()


        public void SetRotation(Csp.Common.Vector4 InValue)
        {
            csp_multiplayer_LightSpaceComponent_SetRotation_void_Vector4RC(_ptr, InValue._ptr);
        }

        /// @}
        /// <summary>Gets the ID of the asset used for the light cookie of this light component.</summary>
        /// <returns>The ID of the asset used for the light cookie of this light component.</returns>


        public string GetLightCookieAssetId()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetLightCookieAssetIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the asset used for the light cookie of this light component.</summary>
        /// <param name="Value">The ID of the asset used for the light cookie of this light component.</param>


        public void SetLightCookieAssetId(string Value)
        {
            csp_multiplayer_LightSpaceComponent_SetLightCookieAssetId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the ID of the asset collection used for the light cookie of this light component.</summary>
        /// <returns>The ID of the asset collection used for the light cookie of this light component.</returns>


        public string GetLightCookieAssetCollectionId()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetLightCookieAssetCollectionIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the asset collection used for the light cookie of this light component.</summary>
        /// <param name="Value">The ID of the asset collection used for the light cookie of this light component.</param>


        public void SetLightCookieAssetCollectionId(string Value)
        {
            csp_multiplayer_LightSpaceComponent_SetLightCookieAssetCollectionId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the type of the light cookie used by this light component.</summary>
        /// <returns>The type of the light cookie used by this light component.</returns>


        public Csp.Multiplayer.LightCookieType GetLightCookieType()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetLightCookieTypeC_LightCookieType(_ptr);

            return _result;
        }

        /// <summary>Sets the type of the light cookie used by this light component.</summary>
        /// <param name="Value">The type of the light cookie used by this light component.</param>


        public void SetLightCookieType(Csp.Multiplayer.LightCookieType Value)
        {
            csp_multiplayer_LightSpaceComponent_SetLightCookieType_void_LightCookieType(_ptr, Value);
        }

        /// <remarks>\addtogroup IVisibleComponent</remarks>
        /// @{
        /// @copydoc IVisibleComponent::GetIsVisible()


        public bool GetIsVisible()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetIsVisibleC_bool(_ptr);

            return _result;
        }

        /// @copydoc IVisibleComponent::SetIsVisible()


        public void SetIsVisible(bool InValue)
        {
            csp_multiplayer_LightSpaceComponent_SetIsVisible_void_bool(_ptr, InValue);
        }

        /// @copydoc IVisibleComponent::GetIsARVisible()


        public bool GetIsARVisible()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetIsARVisibleC_bool(_ptr);

            return _result;
        }

        /// @copydoc IVisibleComponent::SetIsARVisible()


        public void SetIsARVisible(bool InValue)
        {
            csp_multiplayer_LightSpaceComponent_SetIsARVisible_void_bool(_ptr, InValue);
        }

        /// @}
        /// <remarks>\addtogroup IThirdPartyComponentRef</remarks>
        /// @{
        /// @copydoc IThirdPartyComponentRef::GetThirdPartyComponentRef()


        public string GetThirdPartyComponentRef()
        {
            var _result = csp_multiplayer_LightSpaceComponent_GetThirdPartyComponentRefC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// @copydoc IThirdPartyComponentRef::SetThirdPartyComponentRef()


        public void SetThirdPartyComponentRef(string InValue)
        {
            csp_multiplayer_LightSpaceComponent_SetThirdPartyComponentRef_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InValue)
            );
        }

        ~LightSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_LightSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

