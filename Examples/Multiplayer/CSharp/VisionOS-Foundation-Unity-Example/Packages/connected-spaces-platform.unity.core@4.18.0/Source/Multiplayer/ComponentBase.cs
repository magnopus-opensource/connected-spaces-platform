// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>The base class for all components, provides mechanisms for dirtying properties and subscribing to events on property changes.</summary>

    public class ComponentBase : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_ComponentBase";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ComponentBase_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ushort csp_multiplayer_ComponentBase_GetId_uint16_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.ComponentType csp_multiplayer_ComponentBase_GetComponentType_ComponentType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ComponentBase_GetProperties_MapPC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ComponentBase_GetParent_SpaceEntityP(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ComponentBase_RegisterActionHandler_void_StringRC_EntityActionHandler(
            IntPtr @class,
            IntPtr InAction,
            _RegisterActionHandlerActionHandlerDelegate ActionHandler,
            IntPtr ActionHandlerStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ComponentBase_UnregisterActionHandler_void_StringRC(
            IntPtr @class,
            IntPtr InAction
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ComponentBase_InvokeAction_void_StringRC_StringRC(
            IntPtr @class,
            IntPtr InAction,
            IntPtr InActionParams
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ComponentBase_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ComponentBase_Ctor_ComponentType_SpaceEntityP(
            Csp.Multiplayer.ComponentType Type,
            IntPtr Parent
        );

#pragma warning restore IDE1006
        #endregion

        internal ComponentBase(NativePointer ptr) : base(ptr) { }

        delegate void _RegisterActionHandlerActionHandlerDelegate(
            IntPtr _StateObject__,
            NativePointer arg1,
            string arg2,
            string arg3
        );

        public delegate void RegisterActionHandlerActionHandlerDelegate(
            Csp.Multiplayer.ComponentBase arg1,
            string arg2,
            string arg3
        );

        /// <summary>Virtual destructor for the component.</summary>

        ~ComponentBase()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_ComponentBase_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Get the ID for this component.</summary>
        /// <remarks>/// This is set when calling SpaceEntity::AddComponent and is autogenerated with the intention of being unique</remarks>
        /// <remarks>within the context of the entity it is attached to.</remarks>
        /// <remarks>/// @return The ID.</remarks>


        public ushort GetId()
        {
            var _result = csp_multiplayer_ComponentBase_GetId_uint16_t(_ptr);

            return _result;
        }

        /// <summary>Get the ComponentType of the component.</summary>
        /// <returns>The type of the component as an enum.</returns>


        public Csp.Multiplayer.ComponentType GetComponentType()
        {
            var _result = csp_multiplayer_ComponentBase_GetComponentType_ComponentType(_ptr);

            return _result;
        }

        /// <summary>Get a map of the replicated values defined for this component.</summary>
        /// <remarks>/// The index of the map represents a unique index for the property,</remarks>
        /// <remarks>intended to be defined in the inherited component as an enum of available properties keys.</remarks>
        /// <remarks>/// @return A map of the replicated values, keyed by their unique key.</remarks>


        public Csp.Common.Map<uint, Csp.Multiplayer.ReplicatedValue> GetProperties()
        {
            var _result = new Csp.Common.Map<uint, Csp.Multiplayer.ReplicatedValue>(
                csp_multiplayer_ComponentBase_GetProperties_MapPC(_ptr)
            );

            return _result;
        }

        /// <summary>Get the parent SpaceEntity for this component. Components can only attach to one parent.</summary>
        /// <returns>A pointer to the parent SpaceEntity.</returns>


        public Csp.Multiplayer.SpaceEntity GetParent()
        {
            var _result = new Csp.Multiplayer.SpaceEntity(csp_multiplayer_ComponentBase_GetParent_SpaceEntityP(_ptr));

            return _result;
        }

        /// <summary>Register an action handler callback to be called when the given action is invoked.</summary>
        /// <param name="InAction">The identifying name of the action.</param>
        /// <param name="ActionHandler">Callback to be called when the action is invoked, contains</param>
        /// <remarks>a pointer to this component, the name of the action and a string of parameters for the action.</remarks>

        static void RegisterActionHandlerActionHandlerDelegateFunction(
            IntPtr _StateObject__,
            NativePointer arg1,
            string arg2,
            string arg3
        ) {
            var _handle = (GCHandle)_StateObject__;
            var _ActionHandler = (RegisterActionHandlerActionHandlerDelegate)_handle.Target;

            var _arg1 = new Csp.Multiplayer.ComponentBase(arg1);
            var _arg2 = arg2;
            var _arg3 = arg3;

            _ActionHandler(_arg1, _arg2, _arg3);
            // TODO: Queue persistent callback handles to be freed on exit
            // _handle.Free();
        }

        public void RegisterActionHandler(string InAction, RegisterActionHandlerActionHandlerDelegate ActionHandler)
        {
            var _ActionHandler = GCHandle.Alloc(ActionHandler);

            csp_multiplayer_ComponentBase_RegisterActionHandler_void_StringRC_EntityActionHandler(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InAction),
                RegisterActionHandlerActionHandlerDelegateFunction,
                (IntPtr)_ActionHandler
            );
        }

        /// <summary>Removes the action handler callback for the given action.</summary>
        /// <param name="InAction">The identifying name of the action.</param>


        public void UnregisterActionHandler(string InAction)
        {
            csp_multiplayer_ComponentBase_UnregisterActionHandler_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InAction)
            );
        }

        /// <summary>Calls the registered action handler callback for the given action and passes the given parameters.</summary>
        /// <param name="InAction">The identifying name of the action.</param>
        /// <param name="InActionParams">Parameters for the action that will be passed to the action handler callback.</param>


        public void InvokeAction(string InAction, string InActionParams)
        {
            csp_multiplayer_ComponentBase_InvokeAction_void_StringRC_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InAction),
                WrapperHelper.StringToNativeUTF8(InActionParams)
            );
        }

        protected ComponentBase() { }
    }
}

