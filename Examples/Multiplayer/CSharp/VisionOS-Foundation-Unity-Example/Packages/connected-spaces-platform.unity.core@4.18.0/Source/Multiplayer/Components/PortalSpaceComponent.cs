// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    public class PortalSpaceComponent
        : Csp.Multiplayer.ComponentBase,
          Csp.Multiplayer.IEnableableComponent,
          Csp.Multiplayer.IPositionComponent,
          IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_PortalSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_PortalSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_PortalSpaceComponent_GetSpaceIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_PortalSpaceComponent_SetSpaceId_void_StringRC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_PortalSpaceComponent_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_PortalSpaceComponent_SetPosition_void_Vector3RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_PortalSpaceComponent_GetRadiusC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_PortalSpaceComponent_SetRadius_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_PortalSpaceComponent_GetIsEnabledC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_PortalSpaceComponent_SetIsEnabled_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_PortalSpaceComponent_GetSpaceThumbnailC_void_UriResultCallback(
            IntPtr @class,
            GetSpaceThumbnailCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_PortalSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal PortalSpaceComponent(NativePointer ptr) : base(ptr) { }

        public PortalSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        delegate void GetSpaceThumbnailCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        /// <summary>Constructs the portal space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public PortalSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_PortalSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Retrieves the space ID that this portal points to.</summary>
        /// <remarks>When the user uses the portal, it should be able to leave the current space and enter the one</remarks>
        /// <remarks>identified by this function.</remarks>
        /// <returns>The ID of the space the portal component leads the player to.</returns>


        public string GetSpaceId()
        {
            var _result = csp_multiplayer_PortalSpaceComponent_GetSpaceIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the space ID that this portal points to.</summary>
        /// <remarks>When the user uses the portal, it should be able to leave the current space and enter the one</remarks>
        /// <remarks>identified by this function.</remarks>
        /// <param name="Value">The ID of the space the portal component leads the player to.</param>


        public void SetSpaceId(string Value)
        {
            csp_multiplayer_PortalSpaceComponent_SetSpaceId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <remarks>\addtogroup IPositionComponent</remarks>
        /// @{
        /// @copydoc IPositionComponent::GetPosition()


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_PortalSpaceComponent_GetPositionC_Vector3RC(_ptr));

            return _result;
        }

        /// @copydoc IPositionComponent::SetPosition()


        public void SetPosition(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_PortalSpaceComponent_SetPosition_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @}
        /// <summary>Gets the radius of this portal.</summary>
        /// <returns>The radius of this portal.</returns>


        public float GetRadius()
        {
            var _result = csp_multiplayer_PortalSpaceComponent_GetRadiusC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the radius of this portal.</summary>
        /// <param name="Value">The radius of this portal.</param>


        public void SetRadius(float Value)
        {
            csp_multiplayer_PortalSpaceComponent_SetRadius_void_float(_ptr, Value);
        }

        /// <remarks>\addtogroup IEnableableComponent</remarks>
        /// @{
        /// @copydoc IEnableableComponent::GetIsEnabled()


        public bool GetIsEnabled()
        {
            var _result = csp_multiplayer_PortalSpaceComponent_GetIsEnabledC_bool(_ptr);

            return _result;
        }

        /// @copydoc IEnableableComponent::SetIsEnabled()


        public void SetIsEnabled(bool InValue)
        {
            csp_multiplayer_PortalSpaceComponent_SetIsEnabled_void_bool(_ptr, InValue);
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetSpaceThumbnailCallbackDelegate))]
#endif
        static void GetSpaceThumbnailCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.UriResult>)_handle.Target;
            var _this = (PortalSpaceComponent)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.UriResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetSpaceThumbnailCallbackDelegate GetSpaceThumbnailDelegateInstance =
            GetSpaceThumbnailCallbackDelegateFunction;

        /// @}
                /// <summary>Retrieves the space thumbnail information associated with the space.</summary>
                /// <remarks>If the space does not have a thumbnail associated with it the result callback will be successful, the</remarks>
                /// <remarks>HTTP res code will be ResponseNotFound and the Uri field inside the UriResult will be empty.</remarks>
                /// <returns>Result class</returns>

        public Task<Csp.Systems.UriResult> GetSpaceThumbnail()
        {
            var tcs = new TaskCompletionSource<Csp.Systems.UriResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_PortalSpaceComponent_GetSpaceThumbnailC_void_UriResultCallback(
                _ptr,
                GetSpaceThumbnailDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

        ~PortalSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_PortalSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

