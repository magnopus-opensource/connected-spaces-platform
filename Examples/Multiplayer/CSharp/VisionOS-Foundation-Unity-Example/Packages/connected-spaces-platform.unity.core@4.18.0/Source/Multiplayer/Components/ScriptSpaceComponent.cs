// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// @ingroup ScriptSpaceComponent
    /// <summary>Data representation of a ScriptSpaceComponent.</summary>

    public class ScriptSpaceComponent : Csp.Multiplayer.ComponentBase, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_ScriptSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_ScriptSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_ScriptSpaceComponent_GetScriptSourceC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ScriptSpaceComponent_SetScriptSource_void_StringRC(
            IntPtr @class,
            IntPtr ScriptSource
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern long csp_multiplayer_ScriptSpaceComponent_GetOwnerIdC_int64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ScriptSpaceComponent_SetOwnerId_void_int64_t(IntPtr @class, long OwnerId);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.ScriptScope csp_multiplayer_ScriptSpaceComponent_GetScriptScopeC_ScriptScope(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ScriptSpaceComponent_SetScriptScope_void_ScriptScope(
            IntPtr @class,
            Csp.Multiplayer.ScriptScope Scope
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_ScriptSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal ScriptSpaceComponent(NativePointer ptr) : base(ptr) { }

        public ScriptSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the script space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public ScriptSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_ScriptSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Retrieves the source of the script of this script component.</summary>
        /// <returns>The script source of this script component.</returns>


        public string GetScriptSource()
        {
            var _result = csp_multiplayer_ScriptSpaceComponent_GetScriptSourceC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the source of the script of this script component.</summary>
        /// <param name="ScriptSource">The script source of this script component.</param>


        public void SetScriptSource(string ScriptSource)
        {
            csp_multiplayer_ScriptSpaceComponent_SetScriptSource_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(ScriptSource)
            );
        }

        /// <summary>Gets the ID of the owner of this script component.</summary>
        /// <returns>The ID of the owner of this script.</returns>


        public long GetOwnerId()
        {
            var _result = csp_multiplayer_ScriptSpaceComponent_GetOwnerIdC_int64_t(_ptr);

            return _result;
        }

        /// <summary>Sets the ID of the owner of this script component.</summary>
        /// <param name="OwnerId">The ID of the owner of this script.</param>


        public void SetOwnerId(long OwnerId)
        {
            csp_multiplayer_ScriptSpaceComponent_SetOwnerId_void_int64_t(_ptr, OwnerId);
        }

        /// <summary>Gets the scope within which this script operates.</summary>
        /// <returns>The scope of this script.</returns>


        public Csp.Multiplayer.ScriptScope GetScriptScope()
        {
            var _result = csp_multiplayer_ScriptSpaceComponent_GetScriptScopeC_ScriptScope(_ptr);

            return _result;
        }

        /// <summary>Sets the scope within which this script operates.</summary>
        /// <param name="Scope">The scope of this script.</param>


        public void SetScriptScope(Csp.Multiplayer.ScriptScope Scope)
        {
            csp_multiplayer_ScriptSpaceComponent_SetScriptScope_void_ScriptScope(_ptr, Scope);
        }

        ~ScriptSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_ScriptSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

