// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Class for creating and managing multiplayer objects known as space entities.</summary>
    /// <remarks>/// This provides functions to create and manage multiple player avatars and other objects.</remarks>
    /// <remarks>It manages things like queueing updated entities and triggering tick events. Callbacks</remarks>
    /// <remarks>can be registered for certain events that occur within the entity system so clients can</remarks>
    /// <remarks>react appropriately.</remarks>

    public class SpaceEntitySystem : NativeClassWrapper
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_SpaceEntitySystem";

        #region P/Invoke
#pragma warning disable IDE1006

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_SetEntityCreatedCallback_void_EntityCreatedCallback(
            IntPtr @class,
            SetEntityCreatedCallbackCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_SetInitialEntitiesRetrievedCallback_void_CallbackHandler(
            IntPtr @class,
            SetInitialEntitiesRetrievedCallbackCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_SetScriptSystemReadyCallback_void_CallbackHandler(
            IntPtr @class,
            SetScriptSystemReadyCallbackCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_CreateAvatar_void_StringRC_SpaceTransformRC_AvatarState_StringRC_AvatarPlayMode_EntityCreatedCallback(
            IntPtr @class,
            string InName,
            IntPtr InSpaceTransform,
            AvatarState InState,
            string InAvatarId,
            AvatarPlayMode InAvatarPlayMode,
            CreateAvatarCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_CreateObject_void_StringRC_SpaceTransformRC_EntityCreatedCallback(
            IntPtr @class,
            string InName,
            IntPtr InSpaceTransform,
            CreateObjectCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_DestroyEntity_void_SpaceEntityP_CallbackHandler(
            IntPtr @class,
            IntPtr Entity,
            DestroyEntityCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_LocalDestroyEntity_void_SpaceEntityP(
            IntPtr @class,
            IntPtr Entity
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_FindSpaceEntity_SpaceEntityP_StringRC(
            IntPtr @class,
            IntPtr InName
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_FindSpaceEntityById_SpaceEntityP_uint64_t(
            IntPtr @class,
            ulong EntityId
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_FindSpaceAvatar_SpaceEntityP_StringRC(
            IntPtr @class,
            IntPtr InName
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_FindSpaceObject_SpaceEntityP_StringRC(
            IntPtr @class,
            IntPtr InName
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_LockEntityUpdateC_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_UnlockEntityUpdateC_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntitySystem_GetNumEntitiesC_size_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntitySystem_GetNumAvatarsC_size_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntitySystem_GetNumObjectsC_size_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_GetEntityByIndex_SpaceEntityP_size_tC(
            IntPtr @class,
            ulong EntityIndex
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_GetAvatarByIndex_SpaceEntityP_size_tC(
            IntPtr @class,
            ulong AvatarIndex
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_GetObjectByIndex_SpaceEntityP_size_tC(
            IntPtr @class,
            ulong ObjectIndex
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_GetMultiplayerConnection_MultiplayerConnectionP(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_AddEntity_void_SpaceEntityP(
            IntPtr @class,
            IntPtr EntityToAdd
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_QueueEntityUpdate_void_SpaceEntityP(
            IntPtr @class,
            IntPtr EntityToUpdate
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_TickEntities_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_RegisterEntityScriptAsModule_void_SpaceEntityP(
            IntPtr @class,
            IntPtr NewEntity
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_BindNewEntityToScript_void_SpaceEntityP(
            IntPtr @class,
            IntPtr NewEntity
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_ClaimScriptOwnershipC_void_SpaceEntityP(
            IntPtr @class,
            IntPtr Entity
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_MarkEntityForUpdate_void_SpaceEntityP(
            IntPtr @class,
            IntPtr Entity
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_ProcessPendingEntityOperations_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_RetrieveAllEntities_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntitySystem_SetSelectionStateOfEntity_bool_boolC_SpaceEntityP(
            IntPtr @class,
            bool SelectedState,
            IntPtr Entity
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_EnableLeaderElection_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_DisableLeaderElection_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntitySystem_IsLeaderElectionEnabledC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ulong csp_multiplayer_SpaceEntitySystem_GetLeaderIdC_uint64_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_FindComponentById_ComponentBaseP_uint16_t(
            IntPtr @class,
            ushort Id
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_SpaceEntitySystem_GetEntityPatchRateLimitEnabledC_boolC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_SpaceEntitySystem_SetEntityPatchRateLimitEnabled_void_bool(
            IntPtr @class,
            bool Enabled
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_SpaceEntitySystem_Ctor_MultiplayerConnectionP(
            IntPtr InMultiplayerConnection
        );

#pragma warning restore IDE1006
        #endregion

        internal SpaceEntitySystem(NativePointer ptr) : base(ptr) { }

        delegate void CreateAvatarCallbackDelegate(IntPtr _StateObject__, NativePointer arg1);

        delegate void CreateObjectCallbackDelegate(IntPtr _StateObject__, NativePointer arg1);

        delegate void DestroyEntityCallbackDelegate(IntPtr _StateObject__, bool arg1);

        delegate void SetEntityCreatedCallbackCallbackDelegate(IntPtr _StateObject__, NativePointer arg1);

        delegate void SetInitialEntitiesRetrievedCallbackCallbackDelegate(IntPtr _StateObject__, bool arg1);

        delegate void SetScriptSystemReadyCallbackCallbackDelegate(IntPtr _StateObject__, bool arg1);

        readonly List<GCHandle> eventHandles = new List<GCHandle>();

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetEntityCreatedCallbackCallbackDelegate))]
#endif
        static void SetEntityCreatedCallbackCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (SpaceEntitySystem)_handle.Target;
            _this.RealOnEntityCreated?.Invoke(_this, new Csp.Multiplayer.SpaceEntity(_arg1));
        }

        static readonly SetEntityCreatedCallbackCallbackDelegate OnEntityCreatedDelegateInstance =
            SetEntityCreatedCallbackCallbackDelegateFunction;

        bool OnEntityCreatedInitialised = false;
        event EventHandler<Csp.Multiplayer.SpaceEntity>? RealOnEntityCreated;
        public event EventHandler<Csp.Multiplayer.SpaceEntity> OnEntityCreated
        {
            add
            {
                if (!OnEntityCreatedInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_multiplayer_SpaceEntitySystem_SetEntityCreatedCallback_void_EntityCreatedCallback(
                        _ptr,
                        OnEntityCreatedDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnEntityCreatedInitialised = true;
                }

                RealOnEntityCreated += value;
            }
            remove { RealOnEntityCreated -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetInitialEntitiesRetrievedCallbackCallbackDelegate))]
#endif
        static void SetInitialEntitiesRetrievedCallbackCallbackDelegateFunction(IntPtr _StateObject__, bool _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (SpaceEntitySystem)_handle.Target;
            _this.RealOnInitialEntitiesRetrieved?.Invoke(_this, _arg1);
        }

        static readonly SetInitialEntitiesRetrievedCallbackCallbackDelegate OnInitialEntitiesRetrievedDelegateInstance =
            SetInitialEntitiesRetrievedCallbackCallbackDelegateFunction;

        bool OnInitialEntitiesRetrievedInitialised = false;
        event EventHandler<bool>? RealOnInitialEntitiesRetrieved;
        public event EventHandler<bool> OnInitialEntitiesRetrieved
        {
            add
            {
                if (!OnInitialEntitiesRetrievedInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_multiplayer_SpaceEntitySystem_SetInitialEntitiesRetrievedCallback_void_CallbackHandler(
                        _ptr,
                        OnInitialEntitiesRetrievedDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnInitialEntitiesRetrievedInitialised = true;
                }

                RealOnInitialEntitiesRetrieved += value;
            }
            remove { RealOnInitialEntitiesRetrieved -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetScriptSystemReadyCallbackCallbackDelegate))]
#endif
        static void SetScriptSystemReadyCallbackCallbackDelegateFunction(IntPtr _StateObject__, bool _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (SpaceEntitySystem)_handle.Target;
            _this.RealOnScriptSystemReady?.Invoke(_this, _arg1);
        }

        static readonly SetScriptSystemReadyCallbackCallbackDelegate OnScriptSystemReadyDelegateInstance =
            SetScriptSystemReadyCallbackCallbackDelegateFunction;

        bool OnScriptSystemReadyInitialised = false;
        event EventHandler<bool>? RealOnScriptSystemReady;
        public event EventHandler<bool> OnScriptSystemReady
        {
            add
            {
                if (!OnScriptSystemReadyInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_multiplayer_SpaceEntitySystem_SetScriptSystemReadyCallback_void_CallbackHandler(
                        _ptr,
                        OnScriptSystemReadyDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnScriptSystemReadyInitialised = true;
                }

                RealOnScriptSystemReady += value;
            }
            remove { RealOnScriptSystemReady -= value; }
        }

        ~SpaceEntitySystem()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_SpaceEntitySystem_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (CreateAvatarCallbackDelegate))]
#endif
        static void CreateAvatarCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.SpaceEntity>)_handle.Target;
            var _this = (SpaceEntitySystem)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.SpaceEntity(_arg1);

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly CreateAvatarCallbackDelegate CreateAvatarDelegateInstance =
            CreateAvatarCallbackDelegateFunction;

        /// <summary>Creates a SpaceEntity with type Avatar, and relevant components and default states as specified.</summary>
                /// <param name="InName">The name to give the new SpaceEntity.</param>
                /// <param name="InSpaceTransform">The initial transform to set the SpaceEntity to.</param>
                /// <param name="InState">The initial Avatar State to set.</param>
                /// <param name="InAvatarId">The Initial AvatarID to set.</param>
                /// <param name="InAvatarPlayMode">The Initial AvatarPlayMode to set.</param>
                /// <param name="Callback">EntityCreatedCallback A callback that executes when the creation is complete,</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.SpaceEntity> CreateAvatar(
            string InName,
            Csp.Multiplayer.SpaceTransform InSpaceTransform,
            Csp.Multiplayer.AvatarState InState,
            string InAvatarId,
            Csp.Multiplayer.AvatarPlayMode InAvatarPlayMode
        ) {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.SpaceEntity>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_SpaceEntitySystem_CreateAvatar_void_StringRC_SpaceTransformRC_AvatarState_StringRC_AvatarPlayMode_EntityCreatedCallback(
                _ptr,
                InName,
                InSpaceTransform._ptr,
                InState,
                InAvatarId,
                InAvatarPlayMode,
                CreateAvatarDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (CreateObjectCallbackDelegate))]
#endif
        static void CreateObjectCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Multiplayer.SpaceEntity>)_handle.Target;
            var _this = (SpaceEntitySystem)tcs.Task.AsyncState;

            var task_result = new Csp.Multiplayer.SpaceEntity(_arg1);

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly CreateObjectCallbackDelegate CreateObjectDelegateInstance =
            CreateObjectCallbackDelegateFunction;

        /// <summary>Creates a SpaceEntity of type Object, and relevant default values.</summary>
                /// <param name="InName">The name to give the new SpaceEntity.</param>
                /// <param name="InSpaceTransform">The initial transform to set the SpaceEntity to.</param>
                /// <param name="Callback">A callback that executes when the creation is complete,</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Multiplayer.SpaceEntity> CreateObject(
            string InName,
            Csp.Multiplayer.SpaceTransform InSpaceTransform
        ) {
            var tcs = new TaskCompletionSource<Csp.Multiplayer.SpaceEntity>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_SpaceEntitySystem_CreateObject_void_StringRC_SpaceTransformRC_EntityCreatedCallback(
                _ptr,
                InName,
                InSpaceTransform._ptr,
                CreateObjectDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (DestroyEntityCallbackDelegate))]
#endif
        static void DestroyEntityCallbackDelegateFunction(IntPtr _StateObject__, bool _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<bool>)_handle.Target;
            var _this = (SpaceEntitySystem)tcs.Task.AsyncState;

            var task_result = _arg1;

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly DestroyEntityCallbackDelegate DestroyEntityDelegateInstance =
            DestroyEntityCallbackDelegateFunction;

        /// <summary>Destroys both the remote view and the local view of the specified entity.</summary>
                /// <param name="Entity">The entity to be destroyed.</param>
                /// <returns>The result for the request</returns>

        public Task<bool> DestroyEntity(Csp.Multiplayer.SpaceEntity Entity)
        {
            var tcs = new TaskCompletionSource<bool>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_multiplayer_SpaceEntitySystem_DestroyEntity_void_SpaceEntityP_CallbackHandler(
                _ptr,
                Entity._ptr,
                DestroyEntityDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

        /// <summary>Destroys the local client's view of the specified entity.</summary>
        /// <param name="Entity">The entity to be destroyed locally.</param>


        public void LocalDestroyEntity(Csp.Multiplayer.SpaceEntity Entity)
        {
            csp_multiplayer_SpaceEntitySystem_LocalDestroyEntity_void_SpaceEntityP(_ptr, Entity._ptr);
        }

        /// <summary>Finds the first SpaceEntity that matches InName.</summary>
        /// <param name="InName">The name to search.</param>
        /// <returns>A pointer to the first found match SpaceEntity.</returns>


        public Csp.Multiplayer.SpaceEntity FindSpaceEntity(string InName)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_FindSpaceEntity_SpaceEntityP_StringRC(
                    _ptr,
                    WrapperHelper.StringToNativeUTF8(InName)
                )
            );

            return _result;
        }

        /// <summary>Finds the first SpaceEntity that has the ID EntityId.</summary>
        /// <param name="EntityId">The Id to look for.</param>
        /// <returns>A pointer to the first found match SpaceEntity.</returns>


        public Csp.Multiplayer.SpaceEntity FindSpaceEntityById(ulong EntityId)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_FindSpaceEntityById_SpaceEntityP_uint64_t(_ptr, EntityId)
            );

            return _result;
        }

        /// <summary>Finds the first SpaceEntity of type Avatar that matches InName.</summary>
        /// <param name="InName">The name to search.</param>
        /// <returns>A pointer to the first found match SpaceEntity.</returns>


        public Csp.Multiplayer.SpaceEntity FindSpaceAvatar(string InName)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_FindSpaceAvatar_SpaceEntityP_StringRC(
                    _ptr,
                    WrapperHelper.StringToNativeUTF8(InName)
                )
            );

            return _result;
        }

        /// <summary>Finds the first SpaceEntity of type Object that matches InName.</summary>
        /// <param name="InName">The name to search.</param>
        /// <returns>A pointer to the first found match SpaceEntity.</returns>


        public Csp.Multiplayer.SpaceEntity FindSpaceObject(string InName)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_FindSpaceObject_SpaceEntityP_StringRC(
                    _ptr,
                    WrapperHelper.StringToNativeUTF8(InName)
                )
            );

            return _result;
        }

        /// <summary>Locks the entity mutex.</summary>


        public void LockEntityUpdate()
        {
            csp_multiplayer_SpaceEntitySystem_LockEntityUpdateC_void(_ptr);
        }

        /// <summary>Unlocks the entity mutex.</summary>


        public void UnlockEntityUpdate()
        {
            csp_multiplayer_SpaceEntitySystem_UnlockEntityUpdateC_void(_ptr);
        }

        /// <summary>Get the number of total entities in the system (both Avatars and Objects).</summary>
        /// <returns>The total number of entities.</returns>


        public ulong GetNumEntities()
        {
            var _result = csp_multiplayer_SpaceEntitySystem_GetNumEntitiesC_size_t(_ptr);

            return _result;
        }

        /// <summary>Get the number of total Avatars in the system.</summary>
        /// <returns>The total number of Avatar entities.</returns>


        public ulong GetNumAvatars()
        {
            var _result = csp_multiplayer_SpaceEntitySystem_GetNumAvatarsC_size_t(_ptr);

            return _result;
        }

        /// <summary>Get the number of total Objects in the system.</summary>
        /// <returns>The total number of object entities.</returns>


        public ulong GetNumObjects()
        {
            var _result = csp_multiplayer_SpaceEntitySystem_GetNumObjectsC_size_t(_ptr);

            return _result;
        }

        /// <summary>Get an Entity (Avatar or Object) by its index.</summary>
        /// <remarks>/// Note this is not currently thread safe and should only be called from the main thread.</remarks>
        /// <remarks>/// @param EntityIndex size_t : The index of the entity to get.</remarks>
        /// <returns>A pointer to the entity with the given index.</returns>


        public Csp.Multiplayer.SpaceEntity GetEntityByIndex(ulong EntityIndex)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_GetEntityByIndex_SpaceEntityP_size_tC(_ptr, EntityIndex)
            );

            return _result;
        }

        /// <summary>Get an Avatar by its index.</summary>
        /// <remarks>/// Note this is not currently thread safe and should only be called from the main thread.</remarks>
        /// <remarks>/// @param AvatarIndex size_t : The index of the avatar entity to get.</remarks>
        /// <returns>A pointer to the avatar entity with the given index.</returns>


        public Csp.Multiplayer.SpaceEntity GetAvatarByIndex(ulong AvatarIndex)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_GetAvatarByIndex_SpaceEntityP_size_tC(_ptr, AvatarIndex)
            );

            return _result;
        }

        /// <summary>Get an Object by its index.</summary>
        /// <remarks>/// Note this is not currently thread safe and should only be called from the main thread.</remarks>
        /// <remarks>/// @param ObjectIndex size_t : The index of the object entity to get.</remarks>
        /// <returns>A pointer to the object entity with the given index.</returns>


        public Csp.Multiplayer.SpaceEntity GetObjectByIndex(ulong ObjectIndex)
        {
            var _result = new Csp.Multiplayer.SpaceEntity(
                csp_multiplayer_SpaceEntitySystem_GetObjectByIndex_SpaceEntityP_size_tC(_ptr, ObjectIndex)
            );

            return _result;
        }

        /// <summary>Get the MultiplayerConnection object.</summary>
        /// <returns>A pointer to the MultiplayerConnection object.</returns>


        public Csp.Multiplayer.MultiplayerConnection GetMultiplayerConnection()
        {
            var _result = new Csp.Multiplayer.MultiplayerConnection(
                csp_multiplayer_SpaceEntitySystem_GetMultiplayerConnection_MultiplayerConnectionP(_ptr)
            );

            return _result;
        }

        /// <summary>Add a new entity to the system.</summary>
        /// <remarks>/// This can be called at any time from any thread and internally add the entity to a pending</remarks>
        /// <remarks>list which is then updated in a thread safe manner when ProcessPendingEntityOperations</remarks>
        /// <remarks>is called from the main thread.</remarks>
        /// <remarks>/// @param EntityToAdd SpaceEntity : Pointer to the entity to be added.</remarks>


        public void AddEntity(Csp.Multiplayer.SpaceEntity EntityToAdd)
        {
            csp_multiplayer_SpaceEntitySystem_AddEntity_void_SpaceEntityP(_ptr, EntityToAdd._ptr);
        }

        /// <summary>Triggers queuing of the SpaceEntities updated components and replicated data.</summary>
        /// <remarks>/// Causes the replication of a SpaceEntities data on next Tick() or ProcessPendingEntityOperations(). However, this is bound by an</remarks>
        /// <remarks>entities rate limit and will only be replicated if there has been sufficient time since the last time the entity sent a message.</remarks>
        /// <remarks>/// @param EntityToUpdate SpaceEntity : A pointer to the SpaceEntity to update.</remarks>


        public void QueueEntityUpdate(Csp.Multiplayer.SpaceEntity EntityToUpdate)
        {
            csp_multiplayer_SpaceEntitySystem_QueueEntityUpdate_void_SpaceEntityP(_ptr, EntityToUpdate._ptr);
        }

        /// <summary>Processes pending entity operations and then calls tick on scripts if necessary.</summary>


        public void TickEntities()
        {
            csp_multiplayer_SpaceEntitySystem_TickEntities_void(_ptr);
        }

        public void RegisterEntityScriptAsModule(Csp.Multiplayer.SpaceEntity NewEntity)
        {
            csp_multiplayer_SpaceEntitySystem_RegisterEntityScriptAsModule_void_SpaceEntityP(_ptr, NewEntity._ptr);
        }

        public void BindNewEntityToScript(Csp.Multiplayer.SpaceEntity NewEntity)
        {
            csp_multiplayer_SpaceEntitySystem_BindNewEntityToScript_void_SpaceEntityP(_ptr, NewEntity._ptr);
        }

        /// <summary>Sets the script owner for the given entity to the current client</summary>
        /// <param name="Entity">A pointer to the entity</param>


        public void ClaimScriptOwnership(Csp.Multiplayer.SpaceEntity Entity)
        {
            csp_multiplayer_SpaceEntitySystem_ClaimScriptOwnershipC_void_SpaceEntityP(_ptr, Entity._ptr);
        }

        /// <summary>Adds the entity to a list of entities to be updated on tick</summary>
        /// <param name="Entity">A pointer to the entity to be added</param>


        public void MarkEntityForUpdate(Csp.Multiplayer.SpaceEntity Entity)
        {
            csp_multiplayer_SpaceEntitySystem_MarkEntityForUpdate_void_SpaceEntityP(_ptr, Entity._ptr);
        }

        /// <summary>Process pending entity adds/removes and Patch message send and receives.</summary>
        /// <remarks>/// Note this should only be called from main thread</remarks>


        public void ProcessPendingEntityOperations()
        {
            csp_multiplayer_SpaceEntitySystem_ProcessPendingEntityOperations_void(_ptr);
        }

        /// <summary>Retrieves all entities from the endpoint, calls "GetAllScopedObjects" currently.</summary>
        /// <remarks>/// Note this will generate new entity objects for every entity in the current scopes.</remarks>
        /// <remarks>If this is called by a client manually without first deleting all existing tracked entities, it is possible there will be duplicates.</remarks>
        /// <remarks>It is highly advised not to call this function unless you know what you are doing.</remarks>


        public void RetrieveAllEntities()
        {
            csp_multiplayer_SpaceEntitySystem_RetrieveAllEntities_void(_ptr);
        }

        /// <summary>Sets the selected state of an entity, if the operation is acceptable.</summary>
        /// <remarks>/// Criteria:</remarks>
        /// <remarks>For Selection:</remarks>
        /// <remarks>- Entity must be deselected currently</remarks>
        /// <remarks>For Deselection:</remarks>
        /// <remarks>- Entity must be selected currently</remarks>
        /// <remarks>- Entity must be selected by the client attempting the deselection (SpaceEntity::GetSelectingClientID will return this information)</remarks>
        /// <remarks>/// @param SelectedState bool : The state to set the entity to, Selected = True, Deselected = false.</remarks>
        /// <param name="Entity">A pointer to the entity to modify selection state on.</param>
        /// <returns>True if a selection state change has occurred, false if no change was made (due to one of the above criteria not being met).</returns>


        public bool SetSelectionStateOfEntity(bool SelectedState, Csp.Multiplayer.SpaceEntity Entity)
        {
            var _result = csp_multiplayer_SpaceEntitySystem_SetSelectionStateOfEntity_bool_boolC_SpaceEntityP(
                _ptr,
                SelectedState,
                Entity._ptr
            );

            return _result;
        }

        /// <summary>Enable Leader Election feature.</summary>


        public void EnableLeaderElection()
        {
            csp_multiplayer_SpaceEntitySystem_EnableLeaderElection_void(_ptr);
        }

        /// <summary>Disable Leader Election feature.</summary>


        public void DisableLeaderElection()
        {
            csp_multiplayer_SpaceEntitySystem_DisableLeaderElection_void(_ptr);
        }

        /// <summary>Check if the Leader Election feature is enabled.</summary>
        /// <returns>True if enabled, false otherwise.</returns>


        public bool IsLeaderElectionEnabled()
        {
            var _result = csp_multiplayer_SpaceEntitySystem_IsLeaderElectionEnabledC_bool(_ptr);

            return _result;
        }

        /// <summary>Debug helper to get the id of the currently elected script leader.</summary>
        /// <returns>The id of the leader.</returns>


        public ulong GetLeaderId()
        {
            var _result = csp_multiplayer_SpaceEntitySystem_GetLeaderIdC_uint64_t(_ptr);

            return _result;
        }

        /// <summary>Finds a component by the given id.</summary>
        /// <remarks>/// Searchs through all components of all entites so should be used sparingly.</remarks>
        /// <remarks>/// @param Id The id of the component to find.</remarks>
        /// <returns>A pointer to the found component which can be nullptr if the component is not found.</returns>


        public Csp.Multiplayer.ComponentBase FindComponentById(ushort Id)
        {
            var _result = new Csp.Multiplayer.ComponentBase(
                csp_multiplayer_SpaceEntitySystem_FindComponentById_ComponentBaseP_uint16_t(_ptr, Id)
            );

            return _result;
        }

        /// <summary>Retrieve the state of the patch rate limiter. If true, patches are limited for each individual entity to a fixed rate.</summary>
        /// <returns>True if enabled, false otherwise.</returns>


        public bool GetEntityPatchRateLimitEnabled()
        {
            var _result = csp_multiplayer_SpaceEntitySystem_GetEntityPatchRateLimitEnabledC_boolC(_ptr);

            return _result;
        }

        /// <summary>Set the state of the patch rate limiter. If true, patches are limited for each individual entity to a fixed rate.</summary>
        /// <remarks>/// This feature is enabled by default and should only be disabled if you are encountering issues.</remarks>
        /// <remarks>/// @param Enabled : sets if the feature should be enabled or not.</remarks>
        /// <remarks>\rst</remarks>
        /// <remarks>.. note::</remarks>
        /// <remarks>If disabling this feature, more requests will be made to Magnopus Connected Services,</remarks>
        /// <remarks>and consequntly more patch merges may occur on the server as a result.</remarks>
        /// <remarks>\endrst</remarks>


        public void SetEntityPatchRateLimitEnabled(bool Enabled)
        {
            csp_multiplayer_SpaceEntitySystem_SetEntityPatchRateLimitEnabled_void_bool(_ptr, Enabled);
        }
    }
}

