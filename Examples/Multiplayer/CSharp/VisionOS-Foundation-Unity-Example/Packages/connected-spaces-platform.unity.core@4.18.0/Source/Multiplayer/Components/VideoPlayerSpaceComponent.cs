// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// @ingroup VideoPlayerSpaceComponent
    /// <summary>Data representation of an VideoPlayerSpaceComponent.</summary>

    public class VideoPlayerSpaceComponent
        : Csp.Multiplayer.ComponentBase,
          Csp.Multiplayer.IEnableableComponent,
          Csp.Multiplayer.ITransformComponent,
          Csp.Multiplayer.IVisibleComponent,
          IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_VideoPlayerSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_VideoPlayerSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_VideoPlayerSpaceComponent_GetNameC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetName_void_StringRC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_VideoPlayerSpaceComponent_GetVideoAssetIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetVideoAssetId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_VideoPlayerSpaceComponent_GetVideoAssetURLC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetVideoAssetURL_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_VideoPlayerSpaceComponent_GetAssetCollectionIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetAssetCollectionId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_VideoPlayerSpaceComponent_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetPosition_void_Vector3RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_VideoPlayerSpaceComponent_GetRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetRotation_void_Vector4RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_VideoPlayerSpaceComponent_GetScaleC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetScale_void_Vector3RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_VideoPlayerSpaceComponent_GetTransformC_SpaceTransform(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetTransform_void_SpaceTransformRC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsStateSharedC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsStateShared_void_bool(
            IntPtr @class,
            bool Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsAutoPlayC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsAutoPlay_void_bool(IntPtr @class, bool Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsLoopPlaybackC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsLoopPlayback_void_bool(
            IntPtr @class,
            bool Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsAutoResizeC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsAutoResize_void_bool(
            IntPtr @class,
            bool Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_VideoPlayerSpaceComponent_GetAttenuationRadiusC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetAttenuationRadius_void_float(
            IntPtr @class,
            float Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.VideoPlayerPlaybackState csp_multiplayer_VideoPlayerSpaceComponent_GetPlaybackStateC_VideoPlayerPlaybackState(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetPlaybackState_void_VideoPlayerPlaybackState(
            IntPtr @class,
            Csp.Multiplayer.VideoPlayerPlaybackState Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_VideoPlayerSpaceComponent_GetCurrentPlayheadPositionC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetCurrentPlayheadPosition_void_float(
            IntPtr @class,
            float Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_VideoPlayerSpaceComponent_GetTimeSincePlayC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetTimeSincePlay_void_float(
            IntPtr @class,
            float Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.VideoPlayerSourceType csp_multiplayer_VideoPlayerSpaceComponent_GetVideoPlayerSourceTypeC_VideoPlayerSourceType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetVideoPlayerSourceType_void_VideoPlayerSourceType(
            IntPtr @class,
            Csp.Multiplayer.VideoPlayerSourceType Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern ushort csp_multiplayer_VideoPlayerSpaceComponent_GetMeshComponentIdC_uint16_t(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetMeshComponentId_void_uint16_t(
            IntPtr @class,
            ushort Id
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsVisible_void_bool(
            IntPtr @class,
            bool InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsARVisibleC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsARVisible_void_bool(
            IntPtr @class,
            bool InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_VideoPlayerSpaceComponent_GetIsEnabledC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_SetIsEnabled_void_bool(
            IntPtr @class,
            bool InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_VideoPlayerSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal VideoPlayerSpaceComponent(NativePointer ptr) : base(ptr) { }

        public VideoPlayerSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the video player component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public VideoPlayerSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_VideoPlayerSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Gets the name of this video player.</summary>
        /// <returns>The name of this video player.</returns>


        public string GetName()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetNameC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the name of this video player.</summary>
        /// <param name="Value">The name of this video player.</param>


        public void SetName(string Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetName_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the ID of the video asset associated with this video player.</summary>
        /// <returns>The ID of the video asset assicuated with this video player.</returns>


        public string GetVideoAssetId()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetVideoAssetIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the video asset associated with this video player.</summary>
        /// <param name="Value">The ID of the video asset assicuated with this video player.</param>


        public void SetVideoAssetId(string Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetVideoAssetId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the URL of the video asset associated with this video player.</summary>
        /// <returns>The URL of the video asset associated with this video player.</returns>


        public string GetVideoAssetURL()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetVideoAssetURLC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the URL of the video asset associated with this video player.</summary>
        /// <param name="Value">The URL of the video asset associated with this video player.</param>


        public void SetVideoAssetURL(string Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetVideoAssetURL_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the ID of the asset collection associated with this component.</summary>
        /// <remarks>To retrieve this component's video asset, both the Asset ID and the Asset Collection ID are required.</remarks>
        /// <returns>The ID of the asset collection associated with this component.</returns>


        public string GetAssetCollectionId()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetAssetCollectionIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the asset collection associated with this component.</summary>
        /// <remarks>To retrieve this component's video asset, both the Asset ID and the Asset Collection ID are required.</remarks>
        /// <param name="Value">The ID of the asset collection associated with this component.</param>


        public void SetAssetCollectionId(string Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetAssetCollectionId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <remarks>\addtogroup ITransformComponent</remarks>
        /// @{
        /// @copydoc IPositionComponent::GetPosition()


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(
                csp_multiplayer_VideoPlayerSpaceComponent_GetPositionC_Vector3RC(_ptr)
            );

            return _result;
        }

        /// @copydoc IPositionComponent::SetPosition()


        public void SetPosition(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetPosition_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @copydoc IRotationComponent::GetRotation()


        public Csp.Common.Vector4 GetRotation()
        {
            var _result = new Csp.Common.Vector4(
                csp_multiplayer_VideoPlayerSpaceComponent_GetRotationC_Vector4RC(_ptr)
            );

            return _result;
        }

        /// @copydoc IRotationComponent::SetRotation()


        public void SetRotation(Csp.Common.Vector4 InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetRotation_void_Vector4RC(_ptr, InValue._ptr);
        }

        /// @copydoc IScaleComponent::GetScale()


        public Csp.Common.Vector3 GetScale()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_VideoPlayerSpaceComponent_GetScaleC_Vector3RC(_ptr));

            return _result;
        }

        /// @copydoc IScaleComponent::SetScale()


        public void SetScale(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetScale_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @copydoc ITransformComponent::GetTransform()


        public Csp.Multiplayer.SpaceTransform GetTransform()
        {
            var _result = new Csp.Multiplayer.SpaceTransform(
                csp_multiplayer_VideoPlayerSpaceComponent_GetTransformC_SpaceTransform(_ptr)
            );

            return _result;
        }

        /// @copydoc ITransformComonent::SetTransform()


        public void SetTransform(Csp.Multiplayer.SpaceTransform InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetTransform_void_SpaceTransformRC(_ptr, InValue._ptr);
        }

        /// @}
        /// <summary>Checks if the playback state of this video player needs to be shared with other users through replication.</summary>
        /// <returns>True if the playback state of the video needs to be shared among all users, false otherwise.</returns>


        public bool GetIsStateShared()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsStateSharedC_bool(_ptr);

            return _result;
        }

        /// <summary>Establishes if the playback state of this video player needs to be shared with other users through replication.</summary>
        /// <param name="Value">True if the playback state of the video needs to be shared among all users, false otherwise.</param>


        public void SetIsStateShared(bool Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsStateShared_void_bool(_ptr, Value);
        }

        /// <summary>Checks if the video plays automatically on load.</summary>
        /// <returns>True if the video auto-plays on load, false otherwise.</returns>


        public bool GetIsAutoPlay()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsAutoPlayC_bool(_ptr);

            return _result;
        }

        /// <summary>Establishes if the video plays automatically on load.</summary>
        /// <param name="Value">True if the video auto-plays on load, false otherwise.</param>


        public void SetIsAutoPlay(bool Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsAutoPlay_void_bool(_ptr, Value);
        }

        /// <summary>Checks if the video loops (i.e. starts over on end).</summary>
        /// <returns>True if the video loops, false otherwise.</returns>


        public bool GetIsLoopPlayback()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsLoopPlaybackC_bool(_ptr);

            return _result;
        }

        /// <summary>Establishes if the video loops (i.e. starts over on end).</summary>
        /// <param name="Value">True if the video loops, false otherwise.</param>


        public void SetIsLoopPlayback(bool Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsLoopPlayback_void_bool(_ptr, Value);
        }

        /// <summary>Checks if the video auto-resizes if its frame has different dimensions.</summary>
        /// <returns>True if the video will resize automatically, false otherwise.</returns>


        public bool GetIsAutoResize()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsAutoResizeC_bool(_ptr);

            return _result;
        }

        /// <summary>Establishes if the video auto-resizes if its frame has different dimensions.</summary>
        /// <param name="Value">True if the video will resize automatically, false otherwise.</param>


        public void SetIsAutoResize(bool Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsAutoResize_void_bool(_ptr, Value);
        }

        /// <summary>Gets the radius from this component origin within which the audio of this video can be heard by the user.</summary>
        /// <remarks>Only when the user position is within this radius the audio of the video should be heard.</remarks>
        /// <returns>The radius within which the audio of the video can be heard by the user.</returns>


        public float GetAttenuationRadius()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetAttenuationRadiusC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the radius from this component origin within which the audio of this video can be heard by the user.</summary>
        /// <remarks>Only when the user position is within this radius the audio of the video should be heard.</remarks>
        /// <param name="Value">The radius within which the audio of the video can be heard by the user.</param>


        public void SetAttenuationRadius(float Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetAttenuationRadius_void_float(_ptr, Value);
        }

        /// <summary>Retrieves the playback state of the video of this component.</summary>
        /// <returns>The playback state of the video.</returns>


        public Csp.Multiplayer.VideoPlayerPlaybackState GetPlaybackState()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetPlaybackStateC_VideoPlayerPlaybackState(_ptr);

            return _result;
        }

        /// <summary>Sets the playback state of the video of this component.</summary>
        /// <param name="Value">The playback state of the video.</param>


        public void SetPlaybackState(Csp.Multiplayer.VideoPlayerPlaybackState Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetPlaybackState_void_VideoPlayerPlaybackState(_ptr, Value);
        }

        /// <summary>Gets the current playhead position of the played video.</summary>
        /// <returns>The current playhead position of the played video.</returns>


        public float GetCurrentPlayheadPosition()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetCurrentPlayheadPositionC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the current playhead position of the played video.</summary>
        /// <param name="Value">The current playhead position of the played video.</param>


        public void SetCurrentPlayheadPosition(float Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetCurrentPlayheadPosition_void_float(_ptr, Value);
        }

        /// <summary>Gets the time in Unix timestamp format that identifies the moment when the video started to play.</summary>
        /// <returns>The time in Unix timestamp format when the video started to play.</returns>


        public float GetTimeSincePlay()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetTimeSincePlayC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the time in Unix timestamp format that identifies the moment when the video started to play.</summary>
        /// <param name="Value">The time in Unix timestamp format when the video started to play.</param>


        public void SetTimeSincePlay(float Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetTimeSincePlay_void_float(_ptr, Value);
        }

        /// <summary>Gets the type of source the video of this component uses.</summary>
        /// <returns>The type of video source used by this component.</returns>


        public Csp.Multiplayer.VideoPlayerSourceType GetVideoPlayerSourceType()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetVideoPlayerSourceTypeC_VideoPlayerSourceType(
                _ptr
            );

            return _result;
        }

        /// <summary>Sets the type of source the video of this component uses.</summary>
        /// <param name="Value">The type of video source used by this component.</param>


        public void SetVideoPlayerSourceType(Csp.Multiplayer.VideoPlayerSourceType Value)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetVideoPlayerSourceType_void_VideoPlayerSourceType(_ptr, Value);
        }

        /// <summary>Gets the Id of the mesh component that the video should be rendered to</summary>


        public ushort GetMeshComponentId()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetMeshComponentIdC_uint16_t(_ptr);

            return _result;
        }

        /// <summary>Sets the Id of the mesh component that the video should be rendered to</summary>


        public void SetMeshComponentId(ushort Id)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetMeshComponentId_void_uint16_t(_ptr, Id);
        }

        /// <remarks>\addtogroup IVisibleComponent</remarks>
        /// @{
        /// @copydoc IVisibleComponent::GetIsVisible()


        public bool GetIsVisible()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsVisibleC_bool(_ptr);

            return _result;
        }

        /// @copydoc IVisibleComponent::SetIsVisible()


        public void SetIsVisible(bool InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsVisible_void_bool(_ptr, InValue);
        }

        /// @copydoc IVisibleComponent::GetIsARVisible()


        public bool GetIsARVisible()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsARVisibleC_bool(_ptr);

            return _result;
        }

        /// @copydoc IVisibleComponent::SetIsARVisible()


        public void SetIsARVisible(bool InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsARVisible_void_bool(_ptr, InValue);
        }

        /// @}
        /// <remarks>\addtogroup IEnableableComponent</remarks>
        /// @{
        /// @copydoc IEnableableComponent::GetIsEnabled()


        public bool GetIsEnabled()
        {
            var _result = csp_multiplayer_VideoPlayerSpaceComponent_GetIsEnabledC_bool(_ptr);

            return _result;
        }

        /// @copydoc IEnableableComponent::SetIsEnabled()


        public void SetIsEnabled(bool InValue)
        {
            csp_multiplayer_VideoPlayerSpaceComponent_SetIsEnabled_void_bool(_ptr, InValue);
        }

        ~VideoPlayerSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_VideoPlayerSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

