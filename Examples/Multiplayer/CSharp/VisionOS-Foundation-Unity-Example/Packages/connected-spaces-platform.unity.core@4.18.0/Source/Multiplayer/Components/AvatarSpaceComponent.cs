// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Data representation of an AvatarSpaceComponent.</summary>

    public class AvatarSpaceComponent : Csp.Multiplayer.ComponentBase, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_AvatarSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AvatarSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AvatarSpaceComponent_GetAvatarIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetAvatarId_void_StringRC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AvatarSpaceComponent_GetUserIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetUserId_void_StringRC(IntPtr @class, IntPtr Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.AvatarState csp_multiplayer_AvatarSpaceComponent_GetStateC_AvatarState(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetState_void_AvatarState(
            IntPtr @class,
            Csp.Multiplayer.AvatarState Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.AvatarPlayMode csp_multiplayer_AvatarSpaceComponent_GetAvatarPlayModeC_AvatarPlayMode(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetAvatarPlayMode_void_AvatarPlayMode(
            IntPtr @class,
            Csp.Multiplayer.AvatarPlayMode Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern long csp_multiplayer_AvatarSpaceComponent_GetAvatarMeshIndexC_int64_tC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetAvatarMeshIndex_void_int64_t(
            IntPtr @class,
            long Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AvatarSpaceComponent_GetAgoraUserIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetAgoraUserId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AvatarSpaceComponent_GetCustomAvatarUrlC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetCustomAvatarUrl_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_AvatarSpaceComponent_GetIsHandIKEnabledC_boolC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetIsHandIKEnabled_void_bool(IntPtr @class, bool Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AvatarSpaceComponent_GetTargetHandIKTargetLocationC_Vector3RC(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetTargetHandIKTargetLocation_void_Vector3RC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AvatarSpaceComponent_GetHandRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetHandRotation_void_Vector4RC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AvatarSpaceComponent_GetHeadRotationC_Vector4RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetHeadRotation_void_Vector4RC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_AvatarSpaceComponent_GetWalkRunBlendPercentageC_floatC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetWalkRunBlendPercentage_void_float(
            IntPtr @class,
            float Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_AvatarSpaceComponent_GetTorsoTwistAlphaC_floatC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetTorsoTwistAlpha_void_float(
            IntPtr @class,
            float Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AvatarSpaceComponent_GetMovementDirectionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetMovementDirection_void_Vector3RC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.LocomotionModel csp_multiplayer_AvatarSpaceComponent_GetLocomotionModelC_LocomotionModel(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_SetLocomotionModel_void_LocomotionModel(
            IntPtr @class,
            Csp.Multiplayer.LocomotionModel Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AvatarSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal AvatarSpaceComponent(NativePointer ptr) : base(ptr) { }

        public AvatarSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the avatar space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public AvatarSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_AvatarSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <summary>Gets the ID for the avatar of this avatar component.</summary>
        /// <remarks>Used for selecting a specific avatar depending on the user's preferences.</remarks>
        /// <returns>The ID of the currently active avatar of this avatar component.</returns>


        public string GetAvatarId()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetAvatarIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID for the avatar of this avatar component.</summary>
        /// <remarks>Used for selecting a specific avatar depending on the user's preferences.</remarks>
        /// <param name="Value">The ID of the currently active avatar of this avatar component.</param>


        public void SetAvatarId(string Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetAvatarId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the ID of the user that controls this avatar.</summary>
        /// <returns>The ID of the user controlling this avatar.</returns>


        public string GetUserId()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetUserIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the user that controls this avatar.</summary>
        /// <param name="Value">The ID of the user controlling this avatar.</param>


        public void SetUserId(string Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetUserId_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(Value));
        }

        /// <summary>Gets the state of the current avatar.</summary>
        /// <returns>The state of the current avatar.</returns>


        public Csp.Multiplayer.AvatarState GetState()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetStateC_AvatarState(_ptr);

            return _result;
        }

        /// <summary>Sets the state of the current avatar.</summary>
        /// <param name="Value">The state of the current avatar.</param>


        public void SetState(Csp.Multiplayer.AvatarState Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetState_void_AvatarState(_ptr, Value);
        }

        /// <summary>Gets the play mode used by this avatar.</summary>
        /// <returns>The play mode used by this avatar.</returns>


        public Csp.Multiplayer.AvatarPlayMode GetAvatarPlayMode()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetAvatarPlayModeC_AvatarPlayMode(_ptr);

            return _result;
        }

        /// <summary>Sets the play mode used by this avatar.</summary>
        /// <param name="Value">The play mode used by this avatar.</param>


        public void SetAvatarPlayMode(Csp.Multiplayer.AvatarPlayMode Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetAvatarPlayMode_void_AvatarPlayMode(_ptr, Value);
        }

        /// <summary>Gets the ID of the mesh of the avatar of this component.</summary>
        /// <remarks> Used to establish which mesh this avatar should use among a collection of predefined meshes.</remarks>
        /// <returns>The ID of the mesh of the avatar of this component.</returns>


        public long GetAvatarMeshIndex()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetAvatarMeshIndexC_int64_tC(_ptr);

            return _result;
        }

        /// <summary>Sets the ID of the mesh of the avatar of this component.</summary>
        /// <remarks>Used to establish which mesh this avatar should use among a collection of predefined meshes.</remarks>
        /// <param name="Value">The ID of the mesh of the avatar of this component.</param>


        public void SetAvatarMeshIndex(long Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetAvatarMeshIndex_void_int64_t(_ptr, Value);
        }

        /// <summary>Gets the ID of the Agora user bounded to this avatar.</summary>
        /// <remarks>When using voice chat, an Agora user is associated with a specific avatar component, so that</remarks>
        /// <remarks>it is possible to associate the person speaking via the Agora voice chat through the relative avatar.</remarks>
        /// <returns>The ID of the Agora user associated with this avatar component.</returns>


        public string GetAgoraUserId()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetAgoraUserIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the Agora user bounded to this avatar.</summary>
        /// <remarks>When using voice chat, an Agora user is associated with a specific avatar component, so that</remarks>
        /// <remarks>it is possible to associate the person speaking via the Agora voice chat through the relative avatar.</remarks>
        /// <param name="Value">The ID of the Agora user associated with this avatar component.</param>


        public void SetAgoraUserId(string Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetAgoraUserId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the URL of a custom mesh for this avatar.</summary>
        /// <remarks>This is intended for use with external avatar managers, such as ReadyPlayerMe.</remarks>
        /// <returns>The URL of the custom mesh this avatar component uses for its avatar.</returns>


        public string GetCustomAvatarUrl()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetCustomAvatarUrlC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the URL of a custom mesh for this avatar.</summary>
        /// <remarks>This is intended for use with external avatar managers, such as ReadyPlayerMe.</remarks>
        /// <param name="Value">The URL of the custom mesh this avatar component uses for its avatar.</param>


        public void SetCustomAvatarUrl(string Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetCustomAvatarUrl_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Checks if the Hands Inverse Kinematics (IK) are enabled for this avatar.</summary>
        /// <remarks>Intended for use in VR or with virtual hands controllers.</remarks>
        /// <returns>True if the avatar uses IK, false otherwise.</returns>


        public bool GetIsHandIKEnabled()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetIsHandIKEnabledC_boolC(_ptr);

            return _result;
        }

        /// <summary>Sets if the Hands Inverse Kinematics (IK) are enabled for this avatar.</summary>
        /// <remarks>Intended for use in VR or with virtual hands controllers.</remarks>
        /// <param name="Value">True if the avatar uses IK, false otherwise.</param>


        public void SetIsHandIKEnabled(bool Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetIsHandIKEnabled_void_bool(_ptr, Value);
        }

        /// <summary>Gets the location of the target used for the hands IK.</summary>
        /// <remarks>Used in combination with hand IK if enabled.</remarks>
        /// <returns>The tartget location to use for the hands IK.</returns>


        public Csp.Common.Vector3 GetTargetHandIKTargetLocation()
        {
            var _result = new Csp.Common.Vector3(
                csp_multiplayer_AvatarSpaceComponent_GetTargetHandIKTargetLocationC_Vector3RC(_ptr)
            );

            return _result;
        }

        /// <summary>Sets the location of the target used for the hands IK.</summary>
        /// <remarks>Used in combination with hand IK if enabled.</remarks>
        /// <param name="Value">The tartget location to use for the hands IK.</param>


        public void SetTargetHandIKTargetLocation(Csp.Common.Vector3 Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetTargetHandIKTargetLocation_void_Vector3RC(_ptr, Value._ptr);
        }

        /// <summary>Gets the rotation of the avatar hand.</summary>
        /// <remarks>The coordinate system respects the following conventions:</remarks>
        /// <remarks>- Right handed coordinate system</remarks>
        /// <remarks>- Positive rotation is counterclockwise</remarks>
        /// <remarks>- The geographic North is along the positive Z axis (+Z) at an orientation of 0 degrees.</remarks>
        /// <remarks>- North: +Z</remarks>
        /// <remarks>- East: -X</remarks>
        /// <remarks>- South: -Z</remarks>
        /// <remarks>- West: +X</remarks>
        /// <returns>The rotation of the avatar hand.</returns>


        public Csp.Common.Vector4 GetHandRotation()
        {
            var _result = new Csp.Common.Vector4(csp_multiplayer_AvatarSpaceComponent_GetHandRotationC_Vector4RC(_ptr));

            return _result;
        }

        /// <summary>Sets the rotation of the avatar hand.</summary>
        /// <remarks>The coordinate system respects the following conventions:</remarks>
        /// <remarks>- Right handed coordinate system</remarks>
        /// <remarks>- Positive rotation is counterclockwise</remarks>
        /// <remarks>- The geographic North is along the positive Z axis (+Z) at an orientation of 0 degrees.</remarks>
        /// <remarks>- North: +Z</remarks>
        /// <remarks>- East: -X</remarks>
        /// <remarks>- South: -Z</remarks>
        /// <remarks>- West: +X</remarks>
        /// <param name="Value">The tartget location to use for the hands IK.</param>


        public void SetHandRotation(Csp.Common.Vector4 Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetHandRotation_void_Vector4RC(_ptr, Value._ptr);
        }

        /// <summary>Gets the rotation of the avatar head.</summary>
        /// <remarks>The coordinate system respects the following conventions:</remarks>
        /// <remarks>- Right handed coordinate system</remarks>
        /// <remarks>- Positive rotation is counterclockwise</remarks>
        /// <remarks>- The geographic North is along the positive Z axis (+Z) at an orientation of 0 degrees.</remarks>
        /// <remarks>- North: +Z</remarks>
        /// <remarks>- East: -X</remarks>
        /// <remarks>- South: -Z</remarks>
        /// <remarks>- West: +X</remarks>
        /// <returns>The rotation of the avatar head.</returns>


        public Csp.Common.Vector4 GetHeadRotation()
        {
            var _result = new Csp.Common.Vector4(csp_multiplayer_AvatarSpaceComponent_GetHeadRotationC_Vector4RC(_ptr));

            return _result;
        }

        /// <summary>Sets the rotation of the avatar head.</summary>
        /// <remarks>The coordinate system respects the following conventions:</remarks>
        /// <remarks>- Right handed coordinate system</remarks>
        /// <remarks>- Positive rotation is counterclockwise</remarks>
        /// <remarks>- The geographic North is along the positive Z axis (+Z) at an orientation of 0 degrees.</remarks>
        /// <remarks>- North: +Z</remarks>
        /// <remarks>- East: -X</remarks>
        /// <remarks>- South: -Z</remarks>
        /// <remarks>- West: +X</remarks>
        /// <param name="Value">The rotation of the avatar head.</param>


        public void SetHeadRotation(Csp.Common.Vector4 Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetHeadRotation_void_Vector4RC(_ptr, Value._ptr);
        }

        /// <summary>Gets blending between walk and run states expressed in percentage.</summary>
        /// <remarks>Used to calculate a smooth transition between an avatar walking and an avatar running.</remarks>
        /// <remarks>When 0 the avatar is fully walking, when 100 the avatar is fully running.</remarks>
        /// <returns>The percentage of the blending between walk and run states.</returns>


        public float GetWalkRunBlendPercentage()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetWalkRunBlendPercentageC_floatC(_ptr);

            return _result;
        }

        /// <summary>Sets blending between walk and run states expressed in percentage.</summary>
        /// <remarks>Used to calculate a smooth transition between an avatar walking and an avatar running.</remarks>
        /// <remarks>When 0 the avatar is fully walking, when 100 the avatar is fully running.</remarks>
        /// <param name="Value">The percentage of the blending between walk and run states.</param>


        public void SetWalkRunBlendPercentage(float Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetWalkRunBlendPercentage_void_float(_ptr, Value);
        }

        /// <summary>Gets the angle to use to twist the avatar's torso.</summary>
        /// <remarks>To calculate the twist of the avatar torso, it is convention to evaluate the</remarks>
        /// <remarks>difference between the avatar's hip forward direction and the avatar's head forward direction.</remarks>
        /// <remarks>The greater the difference, the further the torso should be twisted.</remarks>
        /// <remarks>Positive value if the torso is turning right, negative if avatar is turning left.</remarks>
        /// <returns>The angle to use to twist the avatar's torso.</returns>


        public float GetTorsoTwistAlpha()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetTorsoTwistAlphaC_floatC(_ptr);

            return _result;
        }

        /// <summary>Sets the angle to use to twist the avatar's torso.</summary>
        /// <remarks>To calculate the twist of the avatar torso, it is convention to evaluate the</remarks>
        /// <remarks>difference between the avatar's hip forward direction and the avatar's head forward direction.</remarks>
        /// <remarks>The greater the difference, the further the torso should be twisted.</remarks>
        /// <remarks>Positive value if the torso is turning right, negative if avatar is turning left.</remarks>
        /// <param name="Value">The angle to use to twist the avatar's torso.</param>


        public void SetTorsoTwistAlpha(float Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetTorsoTwistAlpha_void_float(_ptr, Value);
        }

        /// <summary>Gets a vector that represents the movement direction of the avatar.</summary>
        /// <returns>The vector representing the movement direction of the avatar.</returns>


        public Csp.Common.Vector3 GetMovementDirection()
        {
            var _result = new Csp.Common.Vector3(
                csp_multiplayer_AvatarSpaceComponent_GetMovementDirectionC_Vector3RC(_ptr)
            );

            return _result;
        }

        /// <summary>Sets a vector that represents the movement direction of the avatar.</summary>
        /// <param name="Value">The vector representing the movement direction of the avatar.</param>


        public void SetMovementDirection(Csp.Common.Vector3 Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetMovementDirection_void_Vector3RC(_ptr, Value._ptr);
        }

        /// <summary>Specifies which locomotion model this avatar component is using.</summary>
        /// <returns>The locomotion model used by this avatar component.</returns>


        public Csp.Multiplayer.LocomotionModel GetLocomotionModel()
        {
            var _result = csp_multiplayer_AvatarSpaceComponent_GetLocomotionModelC_LocomotionModel(_ptr);

            return _result;
        }

        /// <summary>Sets which locomotion model this avatar component is using.</summary>
        /// <param name="Value">The locomotion model used by this avatar component.</param>


        public void SetLocomotionModel(Csp.Multiplayer.LocomotionModel Value)
        {
            csp_multiplayer_AvatarSpaceComponent_SetLocomotionModel_void_LocomotionModel(_ptr, Value);
        }

        ~AvatarSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_AvatarSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

