// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Multiplayer
{
    /// <summary>Data representation of an AudioSpaceComponent.</summary>

    public class AudioSpaceComponent
        : Csp.Multiplayer.ComponentBase,
          Csp.Multiplayer.IEnableableComponent,
          Csp.Multiplayer.IPositionComponent,
          Csp.Multiplayer.IThirdPartyComponentRef,
          IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_multiplayer_AudioSpaceComponent";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AudioSpaceComponent_Ctor_SpaceEntityP(IntPtr Parent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_multiplayer_AudioSpaceComponent_GetPositionC_Vector3RC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetPosition_void_Vector3RC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.AudioPlaybackState csp_multiplayer_AudioSpaceComponent_GetPlaybackStateC_AudioPlaybackState(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetPlaybackState_void_AudioPlaybackState(
            IntPtr @class,
            Csp.Multiplayer.AudioPlaybackState Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Multiplayer.AudioType csp_multiplayer_AudioSpaceComponent_GetAudioTypeC_AudioType(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetAudioType_void_AudioType(
            IntPtr @class,
            Csp.Multiplayer.AudioType Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AudioSpaceComponent_GetAudioAssetIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetAudioAssetId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AudioSpaceComponent_GetAssetCollectionIdC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetAssetCollectionId_void_StringRC(
            IntPtr @class,
            IntPtr Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_AudioSpaceComponent_GetAttenuationRadiusC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetAttenuationRadius_void_float(
            IntPtr @class,
            float Value
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_AudioSpaceComponent_GetIsLoopPlaybackC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetIsLoopPlayback_void_bool(IntPtr @class, bool Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_AudioSpaceComponent_GetTimeSincePlayC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetTimeSincePlay_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern float csp_multiplayer_AudioSpaceComponent_GetVolumeC_float(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetVolume_void_float(IntPtr @class, float Value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_multiplayer_AudioSpaceComponent_GetIsEnabledC_bool(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetIsEnabled_void_bool(IntPtr @class, bool InValue);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_multiplayer_AudioSpaceComponent_GetThirdPartyComponentRefC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_SetThirdPartyComponentRef_void_StringRC(
            IntPtr @class,
            IntPtr InValue
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_multiplayer_AudioSpaceComponent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal AudioSpaceComponent(NativePointer ptr) : base(ptr) { }

        public AudioSpaceComponent(Csp.Multiplayer.ComponentBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Constructs the audio space component, and associates it with the specified Parent space entity.</summary>
        /// <param name="Parent">The Space entity that owns this component.</param>

        public AudioSpaceComponent(Csp.Multiplayer.SpaceEntity Parent)
        {
            var np = csp_multiplayer_AudioSpaceComponent_Ctor_SpaceEntityP(Parent._ptr);
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        /// <remarks>\addtogroup IPositionComponent</remarks>
        /// @{
        /// @copydoc IPositionComponent::GetPosition()


        public Csp.Common.Vector3 GetPosition()
        {
            var _result = new Csp.Common.Vector3(csp_multiplayer_AudioSpaceComponent_GetPositionC_Vector3RC(_ptr));

            return _result;
        }

        /// @copydoc IPositionComponent::SetPosition()


        public void SetPosition(Csp.Common.Vector3 InValue)
        {
            csp_multiplayer_AudioSpaceComponent_SetPosition_void_Vector3RC(_ptr, InValue._ptr);
        }

        /// @}
        /// <summary>Gets the current playback state of the audio of this audio component.</summary>
        /// <returns>The current playback state of the audio of this audio component.</returns>


        public Csp.Multiplayer.AudioPlaybackState GetPlaybackState()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetPlaybackStateC_AudioPlaybackState(_ptr);

            return _result;
        }

        /// <summary>Sets the new playback state of the audio of this audio component.</summary>
        /// <param name="Value">The new playback state of the audio of this audio component.</param>


        public void SetPlaybackState(Csp.Multiplayer.AudioPlaybackState Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetPlaybackState_void_AudioPlaybackState(_ptr, Value);
        }

        /// <summary>Gets the type of the audio of this audio component.</summary>
        /// <returns>The type of the audio of this audio component.</returns>


        public Csp.Multiplayer.AudioType GetAudioType()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetAudioTypeC_AudioType(_ptr);

            return _result;
        }

        /// <summary>Sets the type of the audio of this audio component.</summary>
        /// <param name="Value">Type of the audio of this audio component.</param>


        public void SetAudioType(Csp.Multiplayer.AudioType Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetAudioType_void_AudioType(_ptr, Value);
        }

        /// <summary>Gets the asset ID for this audio asset.</summary>
        /// <returns>The ID of this audio asset.</returns>


        public string GetAudioAssetId()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetAudioAssetIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the asset ID for this audio asset.</summary>
        /// <param name="Value">The ID for this audio asset.</param>


        public void SetAudioAssetId(string Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetAudioAssetId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the ID of the asset collection associated with this component.</summary>
        /// <remarks>To retrieve this component's audio asset, both the Asset ID and the Asset Collection ID are required.</remarks>
        /// <returns>The ID of the asset collection associated with this component.</returns>


        public string GetAssetCollectionId()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetAssetCollectionIdC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the ID of the asset collection associated with this component.</summary>
        /// <remarks>To retrieve this component's audio asset, both the Asset ID and the Asset Collection ID are required.</remarks>
        /// <param name="Value">The ID of the asset collection associated with this component.</param>


        public void SetAssetCollectionId(string Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetAssetCollectionId_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(Value)
            );
        }

        /// <summary>Gets the attenuation for the audio when a spatial audio type.</summary>
        /// <remarks>The radius is the minimum distance between the origin of this audio component and</remarks>
        /// <remarks>the position of the player, from within which the player can start hearing</remarks>
        /// <remarks>the spatial audio in range.</remarks>
        /// <remarks>The radius is expressed in meters.</remarks>
        /// <returns>The minimum radius in meters from the origin of the audio component to hear the spatial audio.</returns>


        public float GetAttenuationRadius()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetAttenuationRadiusC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the attenuation for the audio when a spatial audio type.</summary>
        /// <remarks>The radius is the minimum distance between the origin of this audio component and</remarks>
        /// <remarks>the position of the player, from within which the player can start hearing</remarks>
        /// <remarks>the spatial audio in range.</remarks>
        /// <remarks>The radius is expressed in meters.</remarks>
        /// <param name="Value">The minimum radius in meters from the origin of the audio component to hear the spatial audio.</param>


        public void SetAttenuationRadius(float Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetAttenuationRadius_void_float(_ptr, Value);
        }

        /// <summary>Checks if the audio playback is looping.</summary>
        /// <returns>True if the audio loops (i.e. starts from the beginning when ended), false otherwise.</returns>


        public bool GetIsLoopPlayback()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetIsLoopPlaybackC_bool(_ptr);

            return _result;
        }

        /// <summary>Sets if the audio playback is looping.</summary>
        /// <param name="Value">True if the audio loops (i.e. starts from the beginning when ended), false otherwise.</param>


        public void SetIsLoopPlayback(bool Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetIsLoopPlayback_void_bool(_ptr, Value);
        }

        /// <summary>Gets the timestamp recorded from the moment when the audio clip started playing, in Unix timestamp format.</summary>
        /// <returns>The timestamp recorded from the moment when the audio clip started playing, in Unix timestamp format.</returns>


        public float GetTimeSincePlay()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetTimeSincePlayC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the timestamp recorded from the moment when the audio clip started playing, in Unix timestamp format.</summary>
        /// <param name="Value">The timestamp recorded from the moment when the audio clip started playing, in Unix timestamp format.</param>


        public void SetTimeSincePlay(float Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetTimeSincePlay_void_float(_ptr, Value);
        }

        /// <summary>Gets the volume of the audio in a ratio between 0 and 1.</summary>
        /// <remarks>Volume 1 represents the full volume of the audio clip of this component.</remarks>
        /// <returns>The volume of the audio, in a ratio between 0 and 1.</returns>


        public float GetVolume()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetVolumeC_float(_ptr);

            return _result;
        }

        /// <summary>Sets the volume of the audio in a ratio between 0 and 1.</summary>
        /// <remarks>Volume 1 represents the full volume of the audio clip of this component.</remarks>
        /// <param name="Value">The volume of the audio, in a ratio between 0 and 1.</param>


        public void SetVolume(float Value)
        {
            csp_multiplayer_AudioSpaceComponent_SetVolume_void_float(_ptr, Value);
        }

        /// <remarks>\addtogroup IEnableableComponent</remarks>
        /// @{
        /// @copydoc IEnableableComponent::GetIsEnabled()


        public bool GetIsEnabled()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetIsEnabledC_bool(_ptr);

            return _result;
        }

        /// @copydoc IEnableableComponent::SetIsEnabled()


        public void SetIsEnabled(bool InValue)
        {
            csp_multiplayer_AudioSpaceComponent_SetIsEnabled_void_bool(_ptr, InValue);
        }

        /// @}
        /// <remarks>\addtogroup IThirdPartyComponentRef</remarks>
        /// @{
        /// @copydoc IThirdPartyComponentRef::GetThirdPartyComponentRef()


        public string GetThirdPartyComponentRef()
        {
            var _result = csp_multiplayer_AudioSpaceComponent_GetThirdPartyComponentRefC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// @copydoc IThirdPartyComponentRef::SetThirdPartyComponentRef()


        public void SetThirdPartyComponentRef(string InValue)
        {
            csp_multiplayer_AudioSpaceComponent_SetThirdPartyComponentRef_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InValue)
            );
        }

        ~AudioSpaceComponent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_multiplayer_AudioSpaceComponent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

