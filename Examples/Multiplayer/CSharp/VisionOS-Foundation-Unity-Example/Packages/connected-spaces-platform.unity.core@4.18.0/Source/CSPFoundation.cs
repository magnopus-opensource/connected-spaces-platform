// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp
{
    /// <summary>Main entry point for interacting with Foundation.</summary>
    /// <remarks>Provides functionality for initialising, shutting down and managing essential information for the Foundation instance to run.</remarks>

    public static class CSPFoundation
    {
        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_CSPFoundation_Initialise_bool_StringRC_StringRC(IntPtr EndpointRootURI, IntPtr Tenant);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_CSPFoundation_Shutdown_bool();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_CSPFoundation_Tick_void();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_CSPFoundation_GetVersion_StringRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_CSPFoundation_GetBuildType_StringRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_CSPFoundation_GetBuildID_StringRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_CSPFoundation_GetDeviceId_StringRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_CSPFoundation_GetIsInitialised_bool();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_CSPFoundation_GetEndpoints_EndpointURIsRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_CSPFoundation_SetClientUserAgentInfo_void_ClientUserAgentRC(
            IntPtr ClientUserAgentHeader
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_CSPFoundation_GetClientUserAgentInfo_ClientUserAgentRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_CSPFoundation_GetClientUserAgentString_StringRC();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_CSPFoundation_GetTenant_StringRC();

#pragma warning restore IDE1006
        #endregion





        /// <summary>Sets the endpoints for the various services needed for foundation, passes over the client header information and initialises the</summary>
        /// <remarks>systems required for foundation to operate.</remarks>
        /// <param name="EndpointRootURI">Root URI for service endpoints</param>
        /// <param name="Tenant">Tenant for Magnopus Services. Data is not shared between tenants so clients using separate tenants cannot</param>
        /// <remarks>interact with each other.</remarks>
        /// <returns>True for successful initialisation.</returns>


        public static bool Initialise(string EndpointRootURI, string Tenant)
        {
            var _result = csp_CSPFoundation_Initialise_bool_StringRC_StringRC(
                WrapperHelper.StringToNativeUTF8(EndpointRootURI),
                WrapperHelper.StringToNativeUTF8(Tenant)
            );

            return _result;
        }

        /// <summary>This should been used at the end of the of the application lifescyle.</summary>
        /// <remarks>Clears event queues and destroys foundation systems.</remarks>
        /// <remarks>After shutdown, no other Foundation functions should be called until Initialise is called again.</remarks>
        /// <returns>True for successful shutdown</returns>


        public static bool Shutdown()
        {
            var _result = csp_CSPFoundation_Shutdown_bool();

            return _result;
        }

        /// <summary>Ticks the event processing of foundation.</summary>
        /// <remarks>This should only be called once per frame from the client application.</remarks>


        public static void Tick()
        {
            csp_CSPFoundation_Tick_void();
        }

        /// <summary>Gets the foundation version in use.</summary>
        /// <returns>Returns the commit hash for the foundation build</returns>


        public static string GetVersion()
        {
            var _result = csp_CSPFoundation_GetVersion_StringRC();

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Gets the foundation build type in use.</summary>
        /// <returns>Returns the build type for the foundation build (DEV or REL)</returns>


        public static string GetBuildType()
        {
            var _result = csp_CSPFoundation_GetBuildType_StringRC();

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Gets the full foundation build ID in use.</summary>
        /// <remarks>Generated at project generation time using the lastest commit timestamp and hash.</remarks>
        /// <returns>Returns the build ID for the foundation build</returns>


        public static string GetBuildID()
        {
            var _result = csp_CSPFoundation_GetBuildID_StringRC();

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Unique identifier for the current device.</summary>
        /// <remarks>Used internally by certain user authentication endpoints.</remarks>
        /// <returns>A string representing the current device</returns>


        public static string GetDeviceId()
        {
            var _result = csp_CSPFoundation_GetDeviceId_StringRC();

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Is this instance of Foundation initialised.</summary>
        /// <returns>Returns false before Initialise and after Shutdown</returns>


        public static bool GetIsInitialised()
        {
            var _result = csp_CSPFoundation_GetIsInitialised_bool();

            return _result;
        }

        /// <summary>Gets endpoints used for all Magnopus service.</summary>
        /// <remarks>Used internally to setup all System classes.</remarks>
        /// <returns>The EndpointURIs class with current endpoint data</returns>


        public static Csp.EndpointURIs GetEndpoints()
        {
            var _result = new Csp.EndpointURIs(csp_CSPFoundation_GetEndpoints_EndpointURIsRC());

            return _result;
        }

        /// <summary>Sets a class containing all relevant Client info currently set for Foundation.</summary>
        /// <remarks>Used internally to generate ClientUserAgentString.</remarks>
        /// <param name="The">Client Info class with current Client Info data</param>


        public static void SetClientUserAgentInfo(Csp.ClientUserAgent ClientUserAgentHeader)
        {
            csp_CSPFoundation_SetClientUserAgentInfo_void_ClientUserAgentRC(ClientUserAgentHeader._ptr);
        }

        /// <summary>Gets a class containing all relevant Client info currently set for Foundation.</summary>
        /// <returns>The Client Info class with current Client Info data</returns>


        public static Csp.ClientUserAgent GetClientUserAgentInfo()
        {
            var _result = new Csp.ClientUserAgent(csp_CSPFoundation_GetClientUserAgentInfo_ClientUserAgentRC());

            return _result;
        }

        /// <summary>Gets a string containing the Client UserAgent header information.</summary>
        /// <remarks>Used internally in headers for all Magnopus Service requests.</remarks>
        /// <returns>Returns Client UserAgent header</returns>


        public static string GetClientUserAgentString()
        {
            var _result = csp_CSPFoundation_GetClientUserAgentString_StringRC();

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Gets the tenant that foundation is currently using, based on what was provided during initialisation.</summary>
        /// <returns>Csp::common::string&</returns>


        public static string GetTenant()
        {
            var _result = csp_CSPFoundation_GetTenant_StringRC();

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }
    }
}

