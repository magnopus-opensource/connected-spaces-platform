// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// @ingroup Event Ticketing System
    /// <summary>Data representation of a ticketed event</summary>

    public class TicketedEvent : NativeClassWrapper, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_systems_TicketedEvent";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_systems_TicketedEvent__Get_Id(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent__Set_Id(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_systems_TicketedEvent__Get_SpaceId(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent__Set_SpaceId(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Systems.EventTicketingVendor csp_systems_TicketedEvent__Get_Vendor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent__Set_Vendor(IntPtr @class, Csp.Systems.EventTicketingVendor value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_systems_TicketedEvent__Get_VendorEventId(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent__Set_VendorEventId(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_systems_TicketedEvent__Get_VendorEventUri(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent__Set_VendorEventUri(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_systems_TicketedEvent__Get_IsTicketingActive(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent__Set_IsTicketingActive(IntPtr @class, bool value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_TicketedEvent_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_TicketedEvent_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal TicketedEvent(NativePointer ptr) : base(ptr) { }

        /// @brief CHS ID of the event resource.

        public string Id
        {
            get => WrapperHelper.NativeUTF8ToString(csp_systems_TicketedEvent__Get_Id(_ptr));
            set => csp_systems_TicketedEvent__Set_Id(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief  ID of the space the event belongs to.

        public string SpaceId
        {
            get => WrapperHelper.NativeUTF8ToString(csp_systems_TicketedEvent__Get_SpaceId(_ptr));
            set => csp_systems_TicketedEvent__Set_SpaceId(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief 3rd party vendor mangaging the event.

        public Csp.Systems.EventTicketingVendor Vendor
        {
            get => csp_systems_TicketedEvent__Get_Vendor(_ptr);
            set => csp_systems_TicketedEvent__Set_Vendor(_ptr, value);
        }

        /// @brief ID within the 3rd party vendor of the event.

        public string VendorEventId
        {
            get => WrapperHelper.NativeUTF8ToString(csp_systems_TicketedEvent__Get_VendorEventId(_ptr));
            set => csp_systems_TicketedEvent__Set_VendorEventId(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief URI to load the event in the 3rd party.

        public string VendorEventUri
        {
            get => WrapperHelper.NativeUTF8ToString(csp_systems_TicketedEvent__Get_VendorEventUri(_ptr));
            set => csp_systems_TicketedEvent__Set_VendorEventUri(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// @brief Specifies whether ticketing is currently turned on for the space.

        public bool IsTicketingActive
        {
            get => csp_systems_TicketedEvent__Get_IsTicketingActive(_ptr);
            set => csp_systems_TicketedEvent__Set_IsTicketingActive(_ptr, value);
        }

        public TicketedEvent()
        {
            var np = csp_systems_TicketedEvent_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~TicketedEvent()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_TicketedEvent_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

