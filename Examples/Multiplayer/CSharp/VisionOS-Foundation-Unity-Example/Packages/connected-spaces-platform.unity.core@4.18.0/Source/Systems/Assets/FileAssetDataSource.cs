// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// @ingroup Asset System
    /// <summary>A file based data source for Assets, handles uploading a file based on a file path.</summary>

    public class FileAssetDataSource : NativeClassWrapper, Csp.Systems.AssetDataSource, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_systems_FileAssetDataSource";

        #region P/Invoke
#pragma warning disable IDE1006


        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_systems_FileAssetDataSource__Get_FilePath(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_FileAssetDataSource__Set_FilePath(IntPtr @class, IntPtr value);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_systems_FileAssetDataSource_GetMimeTypeC_StringRC(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_FileAssetDataSource_SetMimeType_void_StringRC(IntPtr @class, IntPtr InMimeType);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_FileAssetDataSource_Ctor();

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_FileAssetDataSource_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal FileAssetDataSource(NativePointer ptr) : base(ptr) { }

        public string FilePath
        {
            get => WrapperHelper.NativeUTF8ToString(csp_systems_FileAssetDataSource__Get_FilePath(_ptr));
            set => csp_systems_FileAssetDataSource__Set_FilePath(_ptr, WrapperHelper.StringToNativeUTF8(value));
        }

        /// <summary>Gets the mime type of this data source</summary>
        /// <returns>Returns a string representing the mime type set for this data source.</returns>


        public string GetMimeType()
        {
            var _result = csp_systems_FileAssetDataSource_GetMimeTypeC_StringRC(_ptr);

            var _resultString = WrapperHelper.NativeUTF8ToString(_result);
            Global.Free(_result);

            return _resultString;
        }

        /// <summary>Sets the mime type for this data source</summary>
        /// <param name="InMimeType">The mime type to set.</param>


        public void SetMimeType(string InMimeType)
        {
            csp_systems_FileAssetDataSource_SetMimeType_void_StringRC(
                _ptr,
                WrapperHelper.StringToNativeUTF8(InMimeType)
            );
        }

        public FileAssetDataSource()
        {
            var np = csp_systems_FileAssetDataSource_Ctor();
            _ptr = np.Pointer;
            _ownsPtr = np.OwnsOwnData;
        }

        ~FileAssetDataSource()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_FileAssetDataSource_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

