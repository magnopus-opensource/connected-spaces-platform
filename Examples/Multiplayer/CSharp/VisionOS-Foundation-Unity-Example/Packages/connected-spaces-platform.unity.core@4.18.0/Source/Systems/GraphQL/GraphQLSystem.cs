// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// @ingroup GraphQL System
    /// <summary>Public facing system that allows interfacing with Magnopus Connect Services' GraphQL Server.</summary>
    /// <remarks>Offers methods for sending and receiving GraphQL Queries.</remarks>

    public class GraphQLSystem : Csp.Systems.SystemBase
    {
        internal override string _safeTypeName { get; } = "csp_systems_GraphQLSystem";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_GraphQLSystem_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_GraphQLSystem_RunRequest_void_StringC_GraphQLReceivedCallback(
            IntPtr @class,
            string RequestBody,
            RunRequestApiResponseDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_GraphQLSystem_RunQuery_void_StringC_GraphQLReceivedCallback(
            IntPtr @class,
            string QueryText,
            RunQueryApiResponseDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_GraphQLSystem_Ctor();

#pragma warning restore IDE1006
        #endregion

        internal GraphQLSystem(NativePointer ptr) : base(ptr) { }

        public GraphQLSystem(Csp.Systems.SystemBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        delegate void RunRequestApiResponseDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void RunQueryApiResponseDelegate(IntPtr _StateObject__, NativePointer Result);

        ~GraphQLSystem()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_GraphQLSystem_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (RunRequestApiResponseDelegate))]
#endif
        static void RunRequestApiResponseDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.GraphQLResult>)_handle.Target;
            var _this = (GraphQLSystem)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.GraphQLResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly RunRequestApiResponseDelegate RunRequestDelegateInstance =
            RunRequestApiResponseDelegateFunction;

        /// <summary>Make a request to the Magnopus Connect Services' GraphQL Server, can contain a query, variables and operationName.</summary>
                /// <param name="RequestBody">Graphql request body, json encoded string of full graphql request,</param>
                /// <remarks>can include a query, variables and operationName.</remarks>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.GraphQLResult> RunRequest(string RequestBody)
        {
            var tcs = new TaskCompletionSource<Csp.Systems.GraphQLResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_systems_GraphQLSystem_RunRequest_void_StringC_GraphQLReceivedCallback(
                _ptr,
                RequestBody,
                RunRequestDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (RunQueryApiResponseDelegate))]
#endif
        static void RunQueryApiResponseDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.GraphQLResult>)_handle.Target;
            var _this = (GraphQLSystem)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.GraphQLResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly RunQueryApiResponseDelegate RunQueryDelegateInstance = RunQueryApiResponseDelegateFunction;

        /// <summary>Send basic query to the Magnopus Connect Services' GraphQL Server, must be a simple query, QueryText will be wrapped with a basic</summary>
                /// <remarks>graphql request body. This function does not support variables. for variable use please see RunRequest.</remarks>
                /// <param name="QueryText">Graphql query string. will be wrapped in a basic graphql request,</param>
                /// <remarks>this paramater will be the value of request.query</remarks>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.GraphQLResult> RunQuery(string QueryText)
        {
            var tcs = new TaskCompletionSource<Csp.Systems.GraphQLResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_systems_GraphQLSystem_RunQuery_void_StringC_GraphQLReceivedCallback(
                _ptr,
                QueryText,
                RunQueryDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

        protected GraphQLSystem() { }
    }
}

