// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// @ingroup Point of Interest System
    /// <summary>Public facing system that allows interfacing with Magnopus Connected Services' concept of a Point of Interest.</summary>
    /// <remarks>Offers methods for creating and deleting POIs.</remarks>

    public class PointOfInterestSystem : Csp.Systems.SystemBase
    {
        internal override string _safeTypeName { get; } = "csp_systems_PointOfInterestSystem";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_PointOfInterestSystem_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_PointOfInterestSystem_CreatePOI_void_StringRC_StringRC_StringRC_ArrayRC_EPointOfInterestType_StringRC_GeoLocationRC_AssetCollectionRC_POIResultCallback(
            IntPtr @class,
            string Title,
            string Description,
            string Name,
            IntPtr Tags,
            EPointOfInterestType Type,
            string Owner,
            IntPtr Location,
            IntPtr AssetCollection,
            CreatePOICallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_PointOfInterestSystem_DeletePOI_void_PointOfInterestRC_NullResultCallback(
            IntPtr @class,
            IntPtr POI,
            DeletePOICallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_PointOfInterestSystem_GetPOIsInArea_void_GeoLocationRC_doubleC_POICollectionResultCallback(
            IntPtr @class,
            IntPtr OriginLocation,
            double AreaRadius,
            GetPOIsInAreaCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_PointOfInterestSystem_Ctor();

#pragma warning restore IDE1006
        #endregion

        internal PointOfInterestSystem(NativePointer ptr) : base(ptr) { }

        public PointOfInterestSystem(Csp.Systems.SystemBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        delegate void CreatePOICallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void DeletePOICallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        delegate void GetPOIsInAreaCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        ~PointOfInterestSystem()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_PointOfInterestSystem_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (CreatePOICallbackDelegate))]
#endif
        static void CreatePOICallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.POIResult>)_handle.Target;
            var _this = (PointOfInterestSystem)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.POIResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly CreatePOICallbackDelegate CreatePOIDelegateInstance = CreatePOICallbackDelegateFunction;

        /// <summary>Creates a new Point of Interest.</summary>
                /// <param name="Title">Title for the new poi</param>
                /// <param name="Description">Description for the new poi</param>
                /// <param name="Name">Name for the new poi</param>
                /// <param name="Tags">Optional array of tags to be added to the new poi</param>
                /// <param name="Type">Type of the new poi</param>
                /// <param name="Owner">Owner of the new poi</param>
                /// <param name="Location">Latitude and longitude coordinates of the new poi</param>
                /// <param name="AssetCollection">The assetcollection to assign this poi to</param>
                /// <returns>Data class containing information on task result/progress</returns>

        public Task<Csp.Systems.POIResult> CreatePOI(
            string Title,
            string Description,
            string Name,
            Csp.Common.Array<string>? Tags,
            Csp.Systems.EPointOfInterestType Type,
            string Owner,
            Csp.Systems.GeoLocation Location,
            Csp.Systems.AssetCollection AssetCollection
        ) {
            var tcs = new TaskCompletionSource<Csp.Systems.POIResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_systems_PointOfInterestSystem_CreatePOI_void_StringRC_StringRC_StringRC_ArrayRC_EPointOfInterestType_StringRC_GeoLocationRC_AssetCollectionRC_POIResultCallback(
                _ptr,
                Title,
                Description,
                Name,
                Tags?._ptr ?? IntPtr.Zero,
                Type,
                Owner,
                Location._ptr,
                AssetCollection._ptr,
                CreatePOIDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (DeletePOICallbackDelegate))]
#endif
        static void DeletePOICallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.NullResult>)_handle.Target;
            var _this = (PointOfInterestSystem)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.NullResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly DeletePOICallbackDelegate DeletePOIDelegateInstance = DeletePOICallbackDelegateFunction;

        /// <summary>Deletes a given Point of Interest</summary>
                /// <param name="POI">POI to delete</param>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.NullResult> DeletePOI(Csp.Systems.PointOfInterest POI)
        {
            var tcs = new TaskCompletionSource<Csp.Systems.NullResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_systems_PointOfInterestSystem_DeletePOI_void_PointOfInterestRC_NullResultCallback(
                _ptr,
                POI._ptr,
                DeletePOIDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetPOIsInAreaCallbackDelegate))]
#endif
        static void GetPOIsInAreaCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.POICollectionResult>)_handle.Target;
            var _this = (PointOfInterestSystem)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.POICollectionResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetPOIsInAreaCallbackDelegate GetPOIsInAreaDelegateInstance =
            GetPOIsInAreaCallbackDelegateFunction;

        /// <summary>Retrieves an array with all the Points of Interest that are located inside the circular area defined by the parameters</summary>
                /// <param name="OriginLocation">Latitude and longitude coordinates of the circular area origin</param>
                /// <param name="AreaRadius">Radius of the circular area origin</param>
                /// <returns>Data class containing information on task result/progress</returns>

        public Task<Csp.Systems.POICollectionResult> GetPOIsInArea(
            Csp.Systems.GeoLocation OriginLocation,
            double AreaRadius
        ) {
            var tcs = new TaskCompletionSource<Csp.Systems.POICollectionResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_systems_PointOfInterestSystem_GetPOIsInArea_void_GeoLocationRC_doubleC_POICollectionResultCallback(
                _ptr,
                OriginLocation._ptr,
                AreaRadius,
                GetPOIsInAreaDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

        protected PointOfInterestSystem() { }
    }
}

