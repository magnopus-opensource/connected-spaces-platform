// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// @ingroup Maintenance System
    /// <summary>Public facing system that allows interfacing with the Maintenance Window Server.</summary>
    /// <remarks>This system can be used to query if there is currently a planned outage</remarks>
    /// <remarks>and can also be used to check for up coming maintenances outages</remarks>

    public class MaintenanceSystem : Csp.Systems.SystemBase
    {
        internal override string _safeTypeName { get; } = "csp_systems_MaintenanceSystem";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_MaintenanceSystem_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_MaintenanceSystem_GetMaintenanceInfo_void_MaintenanceInfoCallback(
            IntPtr @class,
            GetMaintenanceInfoCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_MaintenanceSystem_Ctor();

#pragma warning restore IDE1006
        #endregion

        internal MaintenanceSystem(NativePointer ptr) : base(ptr) { }

        public MaintenanceSystem(Csp.Systems.SystemBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        delegate void GetMaintenanceInfoCallbackDelegate(IntPtr _StateObject__, NativePointer Result);

        ~MaintenanceSystem()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_MaintenanceSystem_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (GetMaintenanceInfoCallbackDelegate))]
#endif
        static void GetMaintenanceInfoCallbackDelegateFunction(IntPtr _StateObject__, NativePointer _Result)
        {
            var _handle = (GCHandle)_StateObject__;
            var tcs = (TaskCompletionSource<Csp.Systems.MaintenanceInfoResult>)_handle.Target;
            var _this = (MaintenanceSystem)tcs.Task.AsyncState;

            var task_result = new Csp.Systems.MaintenanceInfoResult(_Result);

            if (task_result.GetResultCode() == Csp.Systems.EResultCode.InProgress)
            {
                return;
            }

            tcs.SetResult(task_result);
            _handle.Free();
        }

        static readonly GetMaintenanceInfoCallbackDelegate GetMaintenanceInfoDelegateInstance =
            GetMaintenanceInfoCallbackDelegateFunction;

        /// <summary>Receives information on planned maintenances outages schedules for the future</summary>
                /// <returns>The result for the request</returns>

        public Task<Csp.Systems.MaintenanceInfoResult> GetMaintenanceInfo()
        {
            var tcs = new TaskCompletionSource<Csp.Systems.MaintenanceInfoResult>(this);
            var handle = GCHandle.Alloc(tcs);

            csp_systems_MaintenanceSystem_GetMaintenanceInfo_void_MaintenanceInfoCallback(
                _ptr,
                GetMaintenanceInfoDelegateInstance,
                (IntPtr)handle
            );

            return tcs.Task;
        }

        protected MaintenanceSystem() { }
    }
}

