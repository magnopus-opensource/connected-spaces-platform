// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// @ingroup Quota System
    /// <summary>Data class used to contain information when receiving an array of feature progresses.</summary>

    public class FeatureLimitResult : Csp.Systems.ResultBase, IDisposable
    {
        internal override string _safeTypeName { get; } = "csp_systems_FeatureLimitResult";

        #region P/Invoke
#pragma warning disable IDE1006



        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_FeatureLimitResult_GetFeatureLimitInfoC_FeatureLimitInfoRC(
            IntPtr @class
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_FeatureLimitResult_Ctor_voidP(IntPtr arg1);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_FeatureLimitResult_Dtor(IntPtr @class);

#pragma warning restore IDE1006
        #endregion

        internal FeatureLimitResult(NativePointer ptr) : base(ptr) { }

        public FeatureLimitResult(Csp.Systems.ResultBase baseInstance)
            : base(new NativePointer(baseInstance._ptr, baseInstance._ownsPtr ? (byte)1 : (byte)0))
        {
            // Prevent previous instance from freeing underlying pointer when destroyed
            baseInstance._ownsPtr = false;
        }

        /// <summary>Retrieves the feature progress result.</summary>
        /// @returnFeatureProgress : const ref to feature progress class


        public Csp.Systems.FeatureLimitInfo GetFeatureLimitInfo()
        {
            var _result = new Csp.Systems.FeatureLimitInfo(
                csp_systems_FeatureLimitResult_GetFeatureLimitInfoC_FeatureLimitInfoRC(_ptr)
            );

            return _result;
        }

        ~FeatureLimitResult()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_FeatureLimitResult_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        new public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }
    }
}

