// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp.Systems
{
    /// <summary>A Connected Spaces Platform level Logger for debugging or printing to console, also handles logging to a file.</summary>
    /// <remarks>Contains a callback system that allows clients to react to specific logs or events.</remarks>

    public class LogSystem : NativeClassWrapper
    {
        internal override string _safeTypeName { get; } = "csp_systems_LogSystem";

        #region P/Invoke
#pragma warning disable IDE1006

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_SetLogCallback_void_LogCallbackHandler(
            IntPtr @class,
            SetLogCallbackInLogCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_SetEventCallback_void_EventCallbackHandler(
            IntPtr @class,
            SetEventCallbackInEventCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_SetBeginMarkerCallback_void_BeginMarkerCallbackHandler(
            IntPtr @class,
            SetBeginMarkerCallbackInBeginCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_SetEndMarkerCallback_void_EndMarkerCallbackHandler(
            IntPtr @class,
            SetEndMarkerCallbackInEndCallbackDelegate callback,
            IntPtr callbackStateObject
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_Dtor(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_SetSystemLevel_void_LogLevelC(
            IntPtr @class,
            Csp.Systems.LogLevel InSystemLevel
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern Csp.Systems.LogLevel csp_systems_LogSystem_GetSystemLevel_LogLevel(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern bool csp_systems_LogSystem_LoggingEnabled_bool_LogLevelC(
            IntPtr @class,
            Csp.Systems.LogLevel Level
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_LogMsg_void_LogLevelC_StringRC(
            IntPtr @class,
            Csp.Systems.LogLevel Level,
            IntPtr InMessage
        );

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_LogEvent_void_StringRC(IntPtr @class, IntPtr InEvent);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_BeginMarker_void_StringRC(IntPtr @class, IntPtr InMarker);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_EndMarker_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_systems_LogSystem_ClearAllCallbacks_void(IntPtr @class);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern NativePointer csp_systems_LogSystem_Ctor();

#pragma warning restore IDE1006
        #endregion

        internal LogSystem(NativePointer ptr) : base(ptr) { }

        delegate void SetLogCallbackInLogCallbackDelegate(IntPtr _StateObject__, string arg1);

        delegate void SetEventCallbackInEventCallbackDelegate(IntPtr _StateObject__, string arg1);

        delegate void SetBeginMarkerCallbackInBeginCallbackDelegate(IntPtr _StateObject__, string arg1);

        delegate void SetEndMarkerCallbackInEndCallbackDelegate(IntPtr _StateObject__, IntPtr arg1);

        readonly List<GCHandle> eventHandles = new List<GCHandle>();

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetLogCallbackInLogCallbackDelegate))]
#endif
        static void SetLogCallbackInLogCallbackDelegateFunction(IntPtr _StateObject__, string _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (LogSystem)_handle.Target;
            _this.RealOnLog?.Invoke(_this, _arg1);
        }

        static readonly SetLogCallbackInLogCallbackDelegate OnLogDelegateInstance =
            SetLogCallbackInLogCallbackDelegateFunction;

        bool OnLogInitialised = false;
        event EventHandler<string>? RealOnLog;
        public event EventHandler<string> OnLog
        {
            add
            {
                if (!OnLogInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_systems_LogSystem_SetLogCallback_void_LogCallbackHandler(
                        _ptr,
                        OnLogDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnLogInitialised = true;
                }

                RealOnLog += value;
            }
            remove { RealOnLog -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetEventCallbackInEventCallbackDelegate))]
#endif
        static void SetEventCallbackInEventCallbackDelegateFunction(IntPtr _StateObject__, string _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (LogSystem)_handle.Target;
            _this.RealOnEvent?.Invoke(_this, _arg1);
        }

        static readonly SetEventCallbackInEventCallbackDelegate OnEventDelegateInstance =
            SetEventCallbackInEventCallbackDelegateFunction;

        bool OnEventInitialised = false;
        event EventHandler<string>? RealOnEvent;
        public event EventHandler<string> OnEvent
        {
            add
            {
                if (!OnEventInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_systems_LogSystem_SetEventCallback_void_EventCallbackHandler(
                        _ptr,
                        OnEventDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnEventInitialised = true;
                }

                RealOnEvent += value;
            }
            remove { RealOnEvent -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetBeginMarkerCallbackInBeginCallbackDelegate))]
#endif
        static void SetBeginMarkerCallbackInBeginCallbackDelegateFunction(IntPtr _StateObject__, string _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (LogSystem)_handle.Target;
            _this.RealOnBeginMarker?.Invoke(_this, _arg1);
        }

        static readonly SetBeginMarkerCallbackInBeginCallbackDelegate OnBeginMarkerDelegateInstance =
            SetBeginMarkerCallbackInBeginCallbackDelegateFunction;

        bool OnBeginMarkerInitialised = false;
        event EventHandler<string>? RealOnBeginMarker;
        public event EventHandler<string> OnBeginMarker
        {
            add
            {
                if (!OnBeginMarkerInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_systems_LogSystem_SetBeginMarkerCallback_void_BeginMarkerCallbackHandler(
                        _ptr,
                        OnBeginMarkerDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnBeginMarkerInitialised = true;
                }

                RealOnBeginMarker += value;
            }
            remove { RealOnBeginMarker -= value; }
        }

#if !UNITY_EDITOR && ENABLE_IL2CPP
        [AOT.MonoPInvokeCallback (typeof (SetEndMarkerCallbackInEndCallbackDelegate))]
#endif
        static void SetEndMarkerCallbackInEndCallbackDelegateFunction(IntPtr _StateObject__, IntPtr _arg1)
        {
            var _handle = (GCHandle)_StateObject__;
            var _this = (LogSystem)_handle.Target;
            _this.RealOnEndMarker?.Invoke(_this, _arg1);
        }

        static readonly SetEndMarkerCallbackInEndCallbackDelegate OnEndMarkerDelegateInstance =
            SetEndMarkerCallbackInEndCallbackDelegateFunction;

        bool OnEndMarkerInitialised = false;
        event EventHandler<IntPtr>? RealOnEndMarker;
        public event EventHandler<IntPtr> OnEndMarker
        {
            add
            {
                if (!OnEndMarkerInitialised)
                {
                    var handle = GCHandle.Alloc(this);
                    csp_systems_LogSystem_SetEndMarkerCallback_void_EndMarkerCallbackHandler(
                        _ptr,
                        OnEndMarkerDelegateInstance,
                        (IntPtr)handle
                    );
                    eventHandles.Add(handle);
                    OnEndMarkerInitialised = true;
                }

                RealOnEndMarker += value;
            }
            remove { RealOnEndMarker -= value; }
        }

        ~LogSystem()
        {
            //RealDispose();
        }

        void RealDispose()
        {
            if (_ownsPtr && !_disposed)
            {
                csp_systems_LogSystem_Dtor(_ptr);
                _disposed = true;
            }

            _disposed = true;
        }

        public void Dispose()
        {
            RealDispose();
            GC.SuppressFinalize(this);
        }

        /// <summary>Set the verbosity of logging for a system-wide level.</summary>
        /// <param name="InSystemLevel">The level to set the system logging to.</param>


        public void SetSystemLevel(Csp.Systems.LogLevel InSystemLevel)
        {
            csp_systems_LogSystem_SetSystemLevel_void_LogLevelC(_ptr, InSystemLevel);
        }

        /// <summary>Retreive the log verbosity level.</summary>


        public Csp.Systems.LogLevel GetSystemLevel()
        {
            var _result = csp_systems_LogSystem_GetSystemLevel_LogLevel(_ptr);

            return _result;
        }

        /// <summary>Check if we currently log a specified log verbosity level.</summary>
        /// <param name="Level">The level to check.</param>


        public bool LoggingEnabled(Csp.Systems.LogLevel Level)
        {
            var _result = csp_systems_LogSystem_LoggingEnabled_bool_LogLevelC(_ptr, Level);

            return _result;
        }

        /// <summary>Log a message at a specific verbosity level.</summary>
        /// <param name="Level">The level to log this message at.</param>
        /// <param name="InMessage">The message to be logged.</param>


        public void LogMsg(Csp.Systems.LogLevel Level, string InMessage)
        {
            csp_systems_LogSystem_LogMsg_void_LogLevelC_StringRC(
                _ptr,
                Level,
                WrapperHelper.StringToNativeUTF8(InMessage)
            );
        }

        /// <summary>Log an event.</summary>
        /// <param name="InEvent">The event to be logged.</param>


        public void LogEvent(string InEvent)
        {
            csp_systems_LogSystem_LogEvent_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(InEvent));
        }

        /// <summary>Specify a 'Marker' event which can be used to communicate a certain process occurring, usually for debugging.</summary>


        public void BeginMarker(string InMarker)
        {
            csp_systems_LogSystem_BeginMarker_void_StringRC(_ptr, WrapperHelper.StringToNativeUTF8(InMarker));
        }

        /// <summary>End a 'Marker' event.</summary>


        public void EndMarker()
        {
            csp_systems_LogSystem_EndMarker_void(_ptr);
        }

        /// <summary>Clears all logging callbacks.</summary>


        public void ClearAllCallbacks()
        {
            csp_systems_LogSystem_ClearAllCallbacks_void(_ptr);
        }

        protected LogSystem() { }
    }
}

