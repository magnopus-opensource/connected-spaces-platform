// WARNING: DO NOT EDIT THIS FILE! IT IS A GENERATED FILE AND
//   ANY CHANGES YOU MAKE WILL BE OVERWRITTEN ON THE NEXT BUILD

#nullable enable annotations

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;

namespace Csp
{
    public static class Global
    {
        #region P/Invoke

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern uint csp_GenerateAssetHash_uint32_t_StringRC(string AssetId);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern IntPtr csp_GetFunctionAddress_voidP_StringRC(string Name);

        [
            DllImport(
#if !UNITY_EDITOR && UNITY_IOS
            "__Internal"
#elif DEBUG && !UNITY_EDITOR_OSX && !UNITY_STANDALONE_OSX
                "ConnectedSpacesPlatform_D"
#else
                "ConnectedSpacesPlatform"
#endif
            ),
            SuppressUnmanagedCodeSecurity
        ]
        static extern void csp_Free_void_voidP(IntPtr Pointer);

        #endregion

        /// <summary>Generates an asset hash for a given asset id.</summary>
        /// <remarks>Can be used to create a unique integer for an Asset for fast comparison or containers which require hashing.</remarks>
        /// <param name="AssetId">Const csp::common::string&</param>
        /// <returns>Asset hash</returns>

        public static uint GenerateAssetHash(string AssetId)
        {
            return csp_GenerateAssetHash_uint32_t_StringRC(AssetId);
        }

        public static IntPtr GetFunctionAddress(string Name)
        {
            return csp_GetFunctionAddress_voidP_StringRC(Name);
        }

        public static void Free(IntPtr Pointer)
        {
            csp_Free_void_voidP(Pointer);
        }
    }
}
