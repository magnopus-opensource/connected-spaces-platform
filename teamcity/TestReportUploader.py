import requests
import argparse
import json
import os

from requests.auth import HTTPBasicAuth

def upload_test_report(args):

    # URI we will be uploading to
    API_BASE_URL = args.api_uri

    # The name of the test cycle. We prepend 'Automation' to help with user readability.
    cycle_name = 'Automation: ' + args.cycle_name

    # Upload the test results.
    with open(args.junit_file, 'r', encoding='utf-8') as file:
        import_results_url = f"{API_BASE_URL}/v1/projects/{args.project_key}/import/execution/junit"

        import_results_headers = {
            "Accept": "application/json",
            "content-type": "application/xml",
            "Authorization": args.api_token
        }

        # Set up params determining how the tests are represented in Jira.
        import_results_params = {
            "cycleName" : cycle_name,
        }

        xml_content = file.read()

        response = requests.post(
            import_results_url,
            headers=import_results_headers,
            params=import_results_params,
            data=xml_content.encode("utf-8")
        )

    # Print the response
    if response.ok:
        print(f"Test results uploaded successfully!")

    else:
        log_path = os.path.dirname(os.path.abspath(args.junit_file)) + "TestReportUploader.log"
        with open(log_path, "w") as file:
            file.write(response.text)
            print(f"Log written to {log_path}")
        raise Exception(f"Failed to import results: {response.status_code}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser("TestReportUploader")
    parser.add_argument("-project_key", required=True, help="The target Jira project's key.")
    parser.add_argument("-api_token", required=True, help="The API token generated by the user uploading test results.")
    parser.add_argument("-api_uri", required=True, help="The URI endpoint that test results will be uploaded to.")
    parser.add_argument("-cycle_name", required=True, help="The name of this test cycle. It should be the unique build name of the product. (e.g. Product - 1.2.3)")
    parser.add_argument("-junit_file", required=True, help="The path to the JUnit XML file describing test results.")
    args = parser.parse_args()

    upload_test_report(args)
