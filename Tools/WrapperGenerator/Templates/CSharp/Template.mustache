{{> Header }}

{{> Usings }}

{{# data }}
namespace {{ definition.translated_namespace }}
{
    static class {{ definition.name }}Delegates
    {
{{# definition.methods }}
        {{> Template/NativeDelegateDeclaration }}
{{/ definition.methods }}
    }

    [NativeClassWrapper("{{ definition.full_safe_type_name }}{{# template_parameters }}_{ {{ name }}TypeName }{{/ template_parameters }}")]
    {{> DocComments }}
    public class {{ definition.name }}<
{{# template_parameters }}
        {{ name }}{{> Comma }}
{{/ template_parameters }}
    > :
{{# definition.base }}
        {{> Type }}
{{/ definition.base}}
{{^ definition.base }}
        NativeClassWrapper
{{/ definition.base }}
{{# definition.should_dispose }}
        , IDisposable
{{/ definition.should_dispose }}
    {

{{# definition.methods }}
        {{> Template/NativeDelegateInstance }}
{{/ definition.methods }}

        private static bool
{{# template_parameters }}
            Is{{ name }}ProxyClass{{> Comma }}
{{/ template_parameters }}
            ;

        static {{ definition.name }}()
        {
{{# template_parameters }}
            string {{ name }}TypeName;

{{# template_parameters }}
            Is{{ name }}ProxyClass = typeof(NativeClassWrapper).IsAssignableFrom(typeof({{ name }}));
{{/ template_parameters }}

            if (Is{{ name }}ProxyClass) {
                {{ name }}TypeName = GetSafeTypeName(typeof({{ name }}));
            }
            else if (typeof({{ name }}).IsEnum)
            {
                {{ name }}TypeName = typeof({{ name }}).Namespace switch
                {
                    "Csp" => "csp_",
                    "Csp.Common" => "csp_common_",
                    "Csp.Systems" => "csp_systems_",
                    "Csp.Multiplayer" => "csp_multiplayer_",
                    _ => throw new Exception("Unknown enum namespace!"),
                };
                {{ name }}TypeName += typeof({{ name }}).Name;
            }
            else
                {{ name }}TypeName = typeof({{ name }}).Name;
            
{{/ template_parameters }}

            IntPtr ptr;

{{# definition.methods }}
            {{> Template/InitialiseDelegate }}

{{/ definition.methods }}
        }

        internal {{ definition.name }}(NativePointer ptr)
            : base(ptr)
        {
        }

{{# definition.methods }}
        {{> Template/Method }}
        
{{/ definition.methods }}
    }
}
{{/ data }}