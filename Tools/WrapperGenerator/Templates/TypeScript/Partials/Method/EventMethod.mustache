{{ name }}(
    callback:
        (
{{# parameters.0.type.function_signature }}
{{# parameters }}
            {{ name }}: {{# type }}{{> TypeName }}{{/ type }}{{> Comma }}
{{/ parameters }}
        ) => void
{{/ parameters.0.type.function_signature }}
) {
{{# parameters.0.type.function_signature }}
    var _callback = (
        _stateObject__: number,
{{# parameters }}
        {{ name }}{{> Comma }}
{{/ parameters }}
    ) => {
{{# parameters }}
{{# type.is_class_or_interface }}
        var _{{ name }} = new {{# type }}{{> TypeName }}{{/ type }}(
            getNativePointer(
                {{ name }}
            )
{{# type.template_arguments }}
            ,
            {{> Template/ConstructorArguments }}
{{/ type.template_arguments }}
        );
{{/ type.is_class_or_interface }}
{{# type.is_string }}
        {
            const _stringValue = Module.UTF8ToString({{ name }});
            free({{ name }});

            {{ name }} = _stringValue;
        }
{{/ type.is_string }}
{{# type.is_number }}
{{^ type.is_float }}
{{^ type.is_signed }}
        {
            const _unfixedValue = {{ name }};
            {{# type }}{{> UnsignedFix }}{{/ type }}

            {{ name }} = _fixedValue;
        }
{{/ type.is_signed }}
{{/ type.is_float }}
{{/ type.is_number }}
{{/ parameters }}

        callback(
{{# parameters }}
        {{# type.is_class_or_interface }}_{{/ type.is_class_or_interface }}{{ name }}{{> Comma }}
{{/ parameters }}
        );
    };

    var _callbackPtr = Module.addFunction(
        _callback,
        "vi{{# parameters }}{{# type }}{{> Method/TypeShorthand }}{{/ type }}{{/ parameters }}"
    );
{{/ parameters.0.type.function_signature }}

    Module.ccall(
        "{{ unique_name }}",
        "void",
        ["number", "number", "number"],
        [this.pointer, _callbackPtr, 0]
    );
}
